<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Google Voice 保号——定时接收短信和电话以及自动回复信息</title>
      <link href="/Google-Voice-AutoReply.html"/>
      <url>/Google-Voice-AutoReply.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>博主对于自己的信息一直比较在意，所以在网上注册东西经常就是能用接码就用接码，不然就是用小号（阿里小号、和多号之类的），主要是避免了一些垃圾广告之类的。所以最近干脆买了个Google Voice的号。</p><p>Google Voice可以免费接听和拨打美国/加拿大电话，免费发短信至美国/加拿大号码并且免费接收全球的短信。</p>          </div><div class="note primary no-icon">            <p>根据<a href="https://www.google.com/intl/zh-CN/googlevoice/program-policies.html" target="_blank" rel="noopener">Google Voice官方限制政策</a>描述。<br>如果您有Google语音号码，但在<strong>6个月内</strong>既没有拨出电话或收到来电，也没有发送或收到短信，则Google会收回该号码。</p><p>Google may reclaim your Google Voice number (if you have one) if you have not placed or received calls, sent or received text messages for a period of 6 months.</p><p>PS：中文文档描述是9个月，英文文档描述是6个月（以英文文档为准）！</p><p>所以需要保持活跃，不过我这么懒怎么可能自己做呢，当然是找个方法让他自动化啦！</p>          </div><hr><h1 id="注册帐号"><a href="#注册帐号" class="headerlink" title="注册帐号"></a>注册帐号</h1><p>由于注册最重要的一点是需要有一个可以收发短信的美国实体电话，并且这个电话不能注册过Google Voice，所以懒得折腾就直接买一个吧，因为现在免费的路子基本都死得差不多了。</p><h1 id="定时接收短信和电话"><a href="#定时接收短信和电话" class="headerlink" title="定时接收短信和电话"></a>定时接收短信和电话</h1><h2 id="使用IFTTT定时给GV发送信息"><a href="#使用IFTTT定时给GV发送信息" class="headerlink" title="使用IFTTT定时给GV发送信息"></a>使用IFTTT定时给GV发送信息</h2><h3 id="注册登录IFTTT"><a href="#注册登录IFTTT" class="headerlink" title="注册登录IFTTT"></a>注册登录IFTTT</h3><p>进入<a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT官网</a>，注册登录。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置<code>Keep Google Voice Active (Send Messege)</code>  -&gt; <a href="https://ifttt.com/applets/SsnxTYZJ-keep-google-voice-active-send-messege" target="_blank" rel="noopener">传送门</a></p><p>点击<code>Connect</code>输入GV号接收验证码连接。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/510f9c7fee5f1.png" alt></p><p>设置<code>日期</code>、<code>时间</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/d31e6f04ac6fa.png" alt></p><div class="note warning">            <p>时区注意选择<code>BeiJing</code>，可以自定义发送的时间及发送信息的内容。</p><p>可以设置离你最接近的时间测试一下，一般没啥问题不测试也行。</p>          </div><h2 id="订阅服务"><a href="#订阅服务" class="headerlink" title="订阅服务"></a>订阅服务</h2><p>给号码<code>22122</code>发短信，内容为<code>JOIN</code>。订阅成功，每月会给你发两条短信。</p><h2 id="使用IFTTT定时给GV打电话"><a href="#使用IFTTT定时给GV打电话" class="headerlink" title="使用IFTTT定时给GV打电话"></a>使用IFTTT定时给GV打电话</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>同样的，注册账号，上面注册过就可以直接看第二步了，没注册就去上面的链接注册。</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>配置<code>Keep Google Voice Active</code>  -&gt; <a href="https://ifttt.com/applets/115222060d-keep-google-voice-active" target="_blank" rel="noopener">传送门</a></p><p>点击<code>Connect</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/b79cd0ffb5505.png" alt></p><p>输入GV号接收验证码连接</p><div class="note warning">            <p>注意，这个地方是打电话的，需要你打开GV接听，也可以看语音信箱转发到邮件的信息。</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/5456e43ac59d2.png" alt></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/75da331716e99.png" alt></p><p>如下图显示就验证完成了，点击右上角<code>Settings</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/fb6aa47e82663.png" alt></p><p>设置<code>日期</code>、<code>时间</code>，点击<code>Save</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/8df98a9229268.png" alt></p><div class="note success">            <p>至此，Google Voice定时接收短信和电话已经完成，每个月会给你发一条信息并打一通电话。</p>          </div><h1 id="自动回复信息"><a href="#自动回复信息" class="headerlink" title="自动回复信息"></a>自动回复信息</h1><h2 id="打开短信转发"><a href="#打开短信转发" class="headerlink" title="打开短信转发"></a>打开短信转发</h2><p>登陆<a href="https://voice.google.com/" target="_blank" rel="noopener">Google Voice</a>，点击<code>设置</code>，把<code>将短信转发到电子邮件地址</code>打开。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/6eb47ead663d3.png" alt></p><h2 id="创建过滤器"><a href="#创建过滤器" class="headerlink" title="创建过滤器"></a>创建过滤器</h2><p>登陆<a href="https://mail.google.com/mail/u/0/#inbox" target="_blank" rel="noopener">Gmail</a>，点击<code>设置</code> -&gt; <code>过滤器和屏蔽的地址</code> -&gt; <code>创建新的过滤器</code> -&gt; 在发件人处填写 <code>@txt.voice.google.com</code> -&gt; 点击<code>创建过滤器</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/b28020d6a2aa2.png" alt></p><p>在弹出的对话框点击<code>选择标签</code> -&gt; <code>新建标签</code> -&gt; 输入标签名为<code>autoreply</code> -&gt; 点击<code>创建</code> -&gt; <code>创建过滤器</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/6b25747b726b6.png" alt></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>登录<a href="https://drive.google.com/" target="_blank" rel="noopener">Google Drive</a>，点击左上角的<code>新建</code>-&gt; <code>Google Apps Script</code>。(如未找到可以在<code>关联更多应用</code>里面查找<code>Google Apps Script</code>关联一下就有了。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/d8993f16c6730.png" alt></p><p>复制下面的代码替换现有的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  function autoReplier() &#123;</span><br><span class="line">  var labelObj &#x3D; GmailApp.getUserLabelByName(&#39;autoreply&#39;);</span><br><span class="line">  var gmailThreads;</span><br><span class="line">  var messages;</span><br><span class="line">  var messagecount;</span><br><span class="line">  var sender;</span><br><span class="line">  var num &#x3D; 9;  &#x2F;&#x2F;设置连续自动回复邮件的次数（为防止两人都是自动回复，当发送次数达到 9 时将不自动回复）。</span><br><span class="line">  var hours &#x3D; 12;  &#x2F;&#x2F;过了多少小时后又可以自动回复。</span><br><span class="line">    </span><br><span class="line">  for (var gg &#x3D; 0; gg &lt; labelObj.getUnreadCount(); gg++) &#123;</span><br><span class="line">    gmailThreads &#x3D; labelObj.getThreads()[gg];</span><br><span class="line">    messages &#x3D; gmailThreads.getMessages();</span><br><span class="line">    messagecount &#x3D; gmailThreads.getMessageCount();</span><br><span class="line">    &#x2F;&#x2F;console.log(messages[messagecount - 9].getDate() + &quot;  time&quot;);</span><br><span class="line">    for (var ii &#x3D; 0; ii &lt; messages.length; ii++) &#123;</span><br><span class="line">      </span><br><span class="line">      if (messages[ii].isUnread()) &#123;</span><br><span class="line">        </span><br><span class="line">        msg &#x3D; messages[ii].getPlainBody();</span><br><span class="line">        sender &#x3D; messages[ii].getFrom(); </span><br><span class="line">        </span><br><span class="line">        array &#x3D; [[&quot;最灵繁的人也看不见自己的背脊。——非洲&quot;],[&quot;最困难的事情就是认识自己。——希腊&quot;],[&quot;有勇气承担命运这才是英雄好汉。——黑塞&quot;],[&quot;阅读使人充实，会谈使人敏捷，写作使人精确。——培根&quot;],[&quot;自知之明是最难得的知识。——西班牙&quot;],[&quot;有时候读书是一种巧妙地避开思考的方法。——赫尔普斯&quot;],[&quot;越是无能的人，越喜欢挑剔别人的错儿。——爱尔兰&quot;],[&quot;一个人即使已登上顶峰，也仍要自强不息。——罗素·贝克&quot;],[&quot;最大的挑战和突破在于用人，而用人最大的突破在于信任人。——马云&quot;]];</span><br><span class="line">        var j &#x3D; Math.floor(Math.random() * (array.length));</span><br><span class="line">        var temp &#x3D; array[j];</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">        if (messagecount &lt; num)&#123;</span><br><span class="line">          MailApp.sendEmail(sender, &quot;Auto Reply&quot;, temp);</span><br><span class="line">        &#125;else if( (messages[messagecount - 1].getDate().getTime() - messages[messagecount - num].getDate().getTime()) &gt; hours * 60 * 60 * 1000 )&#123;</span><br><span class="line">          MailApp.sendEmail(sender, &quot;Auto Reply&quot;, &quot;Hi, 您好！我们已经发了好几条信息了，可以停下来休息休息一下了！本短信由 Google Apps Script 自动发出。&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        messages[ii].markRead();</span><br><span class="line">        messages[ii].moveToTrash();</span><br><span class="line"> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>保存</code>，在弹出的对话框中输出你要显示的名称，例如：<code>autoReplier</code>。再单击<code>调试</code>会提示你授权，你按提示授权即可。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/5e3604b1070f0.png" alt></p><p>再次点击<code>调试</code>，如果没有任何提示说明脚本没有错误。你也可以在<code>查看</code> –&gt; <code>日志</code> –&gt; <code>Apps脚本信息中心</code>中查看脚本运行状态。如果显示状态为已完成则表示脚本没有错误。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/8b9da8a3c0473.png" alt></p><p>单击<code>修改</code> –&gt; <code>当前项目的触发器</code> –&gt; <code>添加触发器</code>，按下图设置好保存即可。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/07/07/ce4e7ae7e5345.png" alt></p><div class="note success">            <p>成功部署短信自动回复！可以找个人给你发或者自己给自己发试试看了。</p>          </div><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><div class="note info">            <p>照着教程做应该是比较全的了，博主觉得应该没啥问题了。</p><p>当然，自己闲着没事也可以手动拨打一下美国微软的客服电话：‪(800) 642-7676‬</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google Voice </tag>
            
            <tag> IFTTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub Actions自动获取Hostloc论坛积分</title>
      <link href="/Hostloc-Auto-Get-Points.html"/>
      <url>/Hostloc-Auto-Get-Points.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>自从玩上了GitHub Actions就有点爱不释手，最近又折腾了一个自动获取Hostloc论坛积分的脚本，MJJ们搞起来！支持多账号，给自己省下时间多水一会论坛。</p>          </div><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><div class="note primary no-icon">            <p>之前也用过一些网页的刷积分的 -&gt; <a href="http://html.biteju.com/hostloc.htm" target="_blank" rel="noopener">传送门1</a> <a href="https://hunter.gitlab.io/tools/www.hostloc.com/" target="_blank" rel="noopener">传送门2</a>。不过，我已经懒到每天点一下都不愿意了，还是自动化舒服。</p>          </div><p>在Hostloc论坛上，访问别人空间每次可以获得2积分，每天最多20积分。这个脚本就是基于这一原理，使用代码模拟用户登录，然后随机访问用户空间来实现的。</p><h1 id="Fork项目"><a href="#Fork项目" class="headerlink" title="Fork项目"></a>Fork项目</h1><p>进入GitHub并Fork项目 -&gt; <a href="https://github.com/xirikm/hostloc-auto-get-points" target="_blank" rel="noopener">传送门</a>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/0d0507b1586af.png" alt></p><h1 id="设置账号密码"><a href="#设置账号密码" class="headerlink" title="设置账号密码"></a>设置账号密码</h1><p>进入你Fork好的仓库，点击<code>Settings</code> -&gt; <code>Secrets</code> -&gt; <code>New secret</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/9209946456bea.png" alt></p><p>添加两个名为<code>HOSTLOC_USERNAME</code>、<code>HOSTLOC_PASSWORD</code>秘密环境变量</p><p>值分别为Hostloc的<code>帐户名</code>、<code>密码</code></p><p>支持同时添加多个帐户，数据之间用半角逗号<code>,</code> 隔开即可，帐户名和密码需一一对应。</p><p>示例：</p><p><strong>HOSTLOC_USERNAME</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cecil_Never,noshore</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/4eb9a3e8f204e.png" alt></p><p><strong>HOSTLOC_PASSWORD</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cecil_Never,noshore</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/7fc464e1604a2.png" alt></p><h1 id="启动Actions"><a href="#启动Actions" class="headerlink" title="启动Actions"></a>启动Actions</h1><p>点击<code>Actions</code>，再点击<code>I understand my workflows, go ahead and enable them</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/1f3352f9178dd.png" alt></p><p>修改任意文件后提交一次，例如修改<code>README.md</code>（随便加个空格什么的），然后提交<code>Commit changes</code>即可触发Actions了！</p><div class="note warning">            <p>这一步比较重要，因为在Fork的仓库上GitHub Actions的定时任务不会自动执行，必须要手动触发一次后才能正常工作。</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/de71f362d3df5.png" alt></p><h1 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h1><p><code>Actions</code> -&gt; <code>Hostloc Auto Get Points</code> -&gt; <code>get_points</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/29/92f6886246bd4.png" alt></p><div class="note success">            <p>看到如上图输出，表示成功。</p><p>此后，在每天国际标准时间17点（北京时间凌晨1点）自动执行获取积分的脚本，你也可以通过Push操作手动触发执行（测试发现定时任务的执行可能有5到10分钟的延迟，属正常现象，耐心等待即可）。</p>          </div><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><div class="note info">            <p>有时候没刷满20积分不是脚本问题，可能是访问了重复用户或者访问了小黑屋用户，不影响脚本使用。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> GitHub Actions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Actions </tag>
            
            <tag> Hostloc论坛获取积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub Actions实现天翼云盘自动签到和抽奖</title>
      <link href="/Cloud189Checkin-Actions.html"/>
      <url>/Cloud189Checkin-Actions.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>相信大部分人应该都听说过前段时间的PD事件，在网上闹得沸沸扬扬。后来，百度网盘又被爆出偷偷上线了“百度激励计划”——用你的带宽为会员服务来减轻它服务器的压力，而你会获得一些“激励”，可谓是一波未平一波又起。接二连三的事情导致百度网盘一度成为焦点。</p><p>天翼云盘也是趁此时机大出风头。先是上线了做任务领取3个月黄金会员和1T家庭空间的活动，接着又出了一个领取一年黄金会员的BUG活动，后来36一年的会员活动也是非常给力，再加上速度快，天翼云盘很快到了和百度网盘争锋的地步。</p>          </div><div class="note primary no-icon">            <p>天翼云盘有个比较有意思的功能就是每天签到抽奖可以获得云盘空间，博主也是每天手动签到，觉得很麻烦。今天要讲的就是利用GitHub Actions实现天翼云盘的自动签到和抽奖。</p>          </div><hr><h1 id="Fork项目"><a href="#Fork项目" class="headerlink" title="Fork项目"></a>Fork项目</h1><p>GitHub地址 -&gt; <a href="https://github.com/peng4740/Cloud189Checkin-Actions" target="_blank" rel="noopener">传送门</a></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/409749938f984.png" alt></p><h1 id="设置账号密码"><a href="#设置账号密码" class="headerlink" title="设置账号密码"></a>设置账号密码</h1><p>点击<code>Settings</code> -&gt; <code>Secrets</code> -&gt; <code>New secret</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/8c5af7c361ee1.png" alt></p><p>添加名为<strong>USER</strong>、<strong>PWD</strong>的变量<br>值分别为<strong>账号</strong>、<strong>密码</strong><br>多账号时账号密码一行一个一一对应</p><p>示例：</p><p><strong>USER</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">13222222222</span><br><span class="line">18999999999</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/e335becbf87cb.png" alt></p><p><strong>PWD</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">noshore</span><br><span class="line">wuanhai</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/4bc7c8a707658.png" alt></p><h1 id="启动Actions"><a href="#启动Actions" class="headerlink" title="启动Actions"></a>启动Actions</h1><p>点击<code>Actions</code>，再点击<code>I understand my workflows, go ahead and enable them</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/b4872db5c9baa.png" alt></p><p>修改任意文件后提交一次，例如修改<code>README.md</code>（随便加个空格什么的），然后提交<code>Commit changes</code>即可触发Actions了！</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/cca0ef9da8af3.png" alt></p><h1 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h1><p><code>Actions</code> -&gt; <code>Cloud189Checkin</code> -&gt; <code>build</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/26/78442eb1d4941.png" alt></p><div class="note success">            <p>看到如上图输出，表示成功。</p><p>此后，将会在每天10:00和22:00各签到一次<br>若有需求，可以在[.github/workflows/run.yml]中自行修改</p>          </div><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><div class="note warning">            <p>验证码错误<br>首先考虑是不是密码错误<br>其次查看是否已经关闭设备锁</p><p>由于利用GitHub Actions要登陆账号，可能存在异地登陆的风险。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> GitHub Actions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Actions </tag>
            
            <tag> 天翼云盘签到 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微软OneDrive网盘免费扩容到25T存储空间</title>
      <link href="/OneDrive-storage.html"/>
      <url>/OneDrive-storage.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>对于有大容量需求的人来说，可能5T都不够用，所以这边分享一个免费升级25T的方法。部分订阅的OneDrive网盘使用量超过90%的可免费申请提高容量到25T，当然包括之前在<a href="https://noshore.cn/Microsoft365-E5.html">免费申请Microsoft 365 E5开发者订阅教程</a>中申请的E5，有需求的可以尝试一下了。</p>          </div><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>支持升级到<code>OneDrive 25T</code>的订阅如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Office 365 企业版 E3</span><br><span class="line">Office 365 企业版 E5</span><br><span class="line">OneDrive for Business 计划 2</span><br><span class="line">SharePoint Online 计划 2</span><br><span class="line">Office 365 企业版 E3</span><br><span class="line">Office 365 企业版 E5</span><br><span class="line">Office 365 A1</span><br><span class="line">Office 365 A3</span><br><span class="line">Office 365 A5</span><br><span class="line">Office 365 美国政府版 G3</span><br><span class="line">Office 365 美国政府版 G5</span><br><span class="line">Office 365 非营利版 E3</span><br><span class="line">Office 365 非赢利组织版 E5</span><br><span class="line">Microsoft 365 企业版 E3</span><br><span class="line">Microsoft 365 企业版 E5</span><br><span class="line">Microsoft 365 A3</span><br><span class="line">Microsoft 365 A5</span><br><span class="line">Microsoft 365 美国政府版 G3</span><br><span class="line">Microsoft 365 美国政府版 G5</span><br><span class="line">Microsoft 365 非营利组织版 E3</span><br><span class="line">Microsoft 365 非营利组织版 E5</span><br></pre></td></tr></table></figure><div class="note primary no-icon">            <p>如果用户已使用5TB存储空间的至少90%容量，Microsoft最多会将OneDrive中的默认存储空间增加到每用户25TB（如有需要，管理员可以设置更低的每用户存储空间限制）。</p><p>对于已使用25TB OneDrive存储空间的至少90%的任何用户，将向各个用户分配25TB SharePoint团队网站作为额外的云存储空间。此额外存储空间以额度方式提供给组织。</p>          </div><h1 id="申请方法"><a href="#申请方法" class="headerlink" title="申请方法"></a>申请方法</h1><div class="note warning">            <p>提示：以下申请操作都需要全局管理员操作，如果需求大，也可以给自己其它的账号也升级到25T。</p>          </div><h2 id="使用量达标"><a href="#使用量达标" class="headerlink" title="使用量达标"></a>使用量达标</h2><p>首先让自己或其中一个子账号的<code>5T</code>网盘使用量超过<code>90%</code>，占比还不够的可以通过复制粘贴的形式快速占到<code>90%</code>以上（在网页版登陆OneDrive，上传一个文件然后复制粘贴，不是客户端！不是客户端！不是客户端！）</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/9361e0f6f4ecc.png" alt></p><h2 id="新建服务请求"><a href="#新建服务请求" class="headerlink" title="新建服务请求"></a>新建服务请求</h2><p>管理员登录后台→<a href="https://admin.microsoft.com/Adminportal/Home" target="_blank" rel="noopener">传送门</a>，点击左侧<code>支持</code>-<code>新建服务请求</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/18691df8ad73b.png" alt></p><p>没有支持选项的先点击<code>全部显示</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/3982552204fd3.png" alt></p><h2 id="提交申请"><a href="#提交申请" class="headerlink" title="提交申请"></a>提交申请</h2><p>在帮助框写上类似下面一句话。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/85e4f6d90573d.png" alt></p><p>然后填上管理员邮箱，附件上传几张该账号容量超过<code>90%</code>的截图，包括账户信息。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/644f71f913e65.png" alt></p><p>最后发送即可，截图不规范的，中途可能会有工作人员打电话要你重新发图片给他。</p><p>等一天，成功的邮件就会发给你，然后这时候你就照着邮件给的方法自行升级到<code>25T</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/0e1c60020ac18.png" alt></p><h1 id="升级方法"><a href="#升级方法" class="headerlink" title="升级方法"></a>升级方法</h1><h2 id="安装SharePoint-Online-Management-Shell"><a href="#安装SharePoint-Online-Management-Shell" class="headerlink" title="安装SharePoint Online Management Shell"></a>安装SharePoint Online Management Shell</h2><p>进入<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=35588" target="_blank" rel="noopener">官网</a>下载最新版SharePoint Online Management Shell。</p><h2 id="打开PowerShell"><a href="#打开PowerShell" class="headerlink" title="打开PowerShell"></a>打开PowerShell</h2><p>点击电脑左下角开始按钮，搜索<code>PowerShell</code>，然后单击<code>Windows PowerShell</code>，此时会弹出一个命令框。</p><div class="note warning">            <p>如果用PowerShell操作失败的，可以使用SharePoint Online Management Shell操作。</p>          </div><p>先检查下<code>SharePoint Online</code>是否安装成功，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Get-Module -Name Microsoft.Online.SharePoint.PowerShell -ListAvailable | Select Name,Version</span><br><span class="line"></span><br><span class="line">#如果输出以下信息则安装成功</span><br><span class="line">Name                                   Version</span><br><span class="line">----                                   -------</span><br><span class="line">Microsoft.Online.SharePoint.PowerShell 16.0.20122.12000</span><br></pre></td></tr></table></figure><p>接下来依次输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#adminUPN为管理员邮箱，orgName为你设置的组织名</span><br><span class="line">$adminUPN&#x3D;&quot;admin@noshore.onmicrosoft.com&quot;</span><br><span class="line">$orgName&#x3D;&quot;noshore&quot;</span><br><span class="line">#该步会弹出一个窗口，会要求你输入邮箱密码</span><br><span class="line">$userCredential &#x3D; Get-Credential -UserName $adminUPN -Message &quot;Type the password.&quot;</span><br><span class="line">Connect-SPOService -Url https:&#x2F;&#x2F;$orgName-admin.sharepoint.com -Credential $userCredential</span><br><span class="line">#这里默认修改为25T，将后面的地址改成你要修改的OneDrive网盘地址，地址仿照下面的即可</span><br><span class="line">Set-SPOSite -Identity https:&#x2F;&#x2F;noshore-my.sharepoint.com&#x2F;personal&#x2F;noshore_admin_onmicrosoft_com -StorageQuota 26214400</span><br></pre></td></tr></table></figure><div class="note success">            <p>到此我们就成功将OneDrive网盘升级到了25T。</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/ce3d01cda258a.png" alt></p><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><div class="note warning">            <p>最后要注意的是，网盘使用量至少要保留<code>4.5T</code>以上，不然随时可能会变成<code>5T</code>。当然如果你<code>25T</code>使用量达到了90%，还可以再次用同样办法申请<code>25TB SharePoint</code>团队网站，但不会增加自身的<code>OneDrive</code>网盘容量了。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> Microsoft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
            <tag> OneDrive扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费申请Microsoft 365 E5开发者订阅教程</title>
      <link href="/Microsoft365-E5.html"/>
      <url>/Microsoft365-E5.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>今年微软宣布Office 365将于2020年4月21日正式升级为Microsoft 365。以前我们称呼的OFFICE 365全部变成Microsoft 365啦！包括订阅许可的命名也变了！</p>          </div><div class="note primary no-icon">            <p>以前的开发者订阅是E3，一年续期一次，不过现在已经基本没有渠道可以申请了。现在的E5是90天续订一次，基本上只要多调用API续订没有太大问题，具体续订教程可以看——<a href="https://noshore.cn/e5.html">Microsoft 365 E5开发者订阅保命计划</a></p>          </div><hr><h1 id="订阅详情"><a href="#订阅详情" class="headerlink" title="订阅详情"></a>订阅详情</h1><p>本订阅支持大家经常用到的<code>OFFICE 365桌面版</code>，<code>OneDrive网盘</code>以及一些其他的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Microsoft 365 E5 Developer (without Windows and Audio Conferencing)</span><br><span class="line">Common Data Service</span><br><span class="line">Microsoft Bookings</span><br><span class="line">Microsoft Records Management</span><br><span class="line">Microsoft ML-based classification</span><br><span class="line">Microsoft Insider Risk Management</span><br><span class="line">Microsoft Information Governance</span><br><span class="line">Microsoft Data Investigations</span><br><span class="line">Microsoft Customer Key</span><br><span class="line">Microsoft Communications DLP</span><br><span class="line">Microsoft Communications Compliance</span><br><span class="line">Office 365 SafeDocs</span><br><span class="line">Microsoft 365 Advanced Auditing</span><br><span class="line">Yammer Enterprise</span><br><span class="line">Whiteboard (Plan 3)</span><br><span class="line">To-Do (Plan 3)</span><br><span class="line">Sway</span><br><span class="line">Skype for Business Online (Plan 2)</span><br><span class="line">SharePoint Online (Plan 2)</span><br><span class="line">PowerApps for Office 365</span><br><span class="line">Power BI Pro</span><br><span class="line">Microsoft 365 Phone System</span><br><span class="line">Office for the web</span><br><span class="line">The latest desktop version of Office</span><br><span class="line">Office 365 Privileged Access Management</span><br><span class="line">Office 365 Advanced Threat Protection (Plan 2)</span><br><span class="line">Office 365 Cloud App Security</span><br><span class="line">Office 365 Advanced eDiscovery</span><br><span class="line">Microsoft Teams</span><br><span class="line">Microsoft Stream for O365 E5 SKU</span><br><span class="line">Microsoft StaffHub</span><br><span class="line">Microsoft Planner</span><br><span class="line">Microsoft MyAnalytics (Full)</span><br><span class="line">Microsoft Intune</span><br><span class="line">Microsoft Forms (Plan E5)</span><br><span class="line">Microsoft Cloud App Security</span><br><span class="line">Microsoft Azure Multi-Factor Authentication</span><br><span class="line">Azure Rights Management</span><br><span class="line">Information Protection for Office 365 – Standard</span><br><span class="line">Information Protection for Office 365 – Premium</span><br><span class="line">Flow for Office 365</span><br><span class="line">Exchange Online (Plan 2)</span><br><span class="line">Customer Lockbox</span><br><span class="line">Azure Information Protection Premium P2</span><br><span class="line">Azure Information Protection Premium P1</span><br><span class="line">Azure Advanced Threat Protection</span><br><span class="line">Azure Active Directory Premium P2</span><br><span class="line">Azure Active Directory Premium P1</span><br></pre></td></tr></table></figure><h1 id="注册微软账号"><a href="#注册微软账号" class="headerlink" title="注册微软账号"></a>注册微软账号</h1><p>首先，你需要注册一个微软账号，如果你已经有了，可以直接登陆。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/e8f5f4f2051e2.png" alt></p><h1 id="登陆并完善信息"><a href="#登陆并完善信息" class="headerlink" title="登陆并完善信息"></a>登陆并完善信息</h1><p>进入<a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program" target="_blank" rel="noopener">开发者中心</a>，右上角登陆，点击<code>JOIN NOW</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/321446e7938f4.png" alt></p><div class="note warning">            <p>这里需要注意，需要先到：<a href="https://account.microsoft.com/profile" target="_blank" rel="noopener">https://account.microsoft.com/profile</a> 维护自己用户名等信息，否则无法进行下一步！</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/a9869ee3b1850.png" alt></p><h1 id="申请试用"><a href="#申请试用" class="headerlink" title="申请试用"></a>申请试用</h1><p>填写相关信息，国家选美国（选其他国家也可以）</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/e715f6474dcff.png" alt></p><p>勾选你要使用哪些功能，不知道怎么勾选那就全勾选吧！</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/8ee9a73ca183e.png" alt></p><h1 id="开通订阅"><a href="#开通订阅" class="headerlink" title="开通订阅"></a>开通订阅</h1><p>点击<code>SET UP E5 SUBSCRIPTION</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/ac9e7f01acdf4.png" alt></p><p>创建自己的管理员账号（<code>用户名</code>、<code>域名</code>、<code>密码</code>）</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/04b1fa7cd2e6d.png" alt></p><p>填写手机号接收<code>验证码</code>（国内外手机均可）</p><div class="note warning">            <p>此处可能无法发送验证码，需要搭梯子。</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/17/050a3de5fe250.png" alt></p><div class="note success">            <p>提交之后很快就会显示成功，然后就可以愉快的白嫖啦。当然别忘了去看看续订教程！</p>          </div><h1 id="管理平台"><a href="#管理平台" class="headerlink" title="管理平台"></a>管理平台</h1><p>地址：<a href="https://portal.office.com/" target="_blank" rel="noopener">https://portal.office.com/</a></p><p>使用你的管理员账号登陆（onmicrosoft.com结尾的账号）</p><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>整体来说申请过程基本没有难度，唯一有可能碰到的小障碍就是接收不到验证码，不过搭个梯子就能解决。</p><p>以后想看订阅剩余时间仍然是前往<a href="https://developer.microsoft.com/en-us/microsoft-365/profile" target="_blank" rel="noopener">开发者中心</a>。</p><div class="note warning">            <p>登陆是用申请时候的帐号而不是全局管理账号，很多人申请之后可能就忘了。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> Microsoft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> E5免费申请 </tag>
            
            <tag> Microsoft 365 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Fiora：一款二次元Web多人在线聊天系统</title>
      <link href="/Fiora.html"/>
      <url>/Fiora.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p><strong>前言：</strong></p><p>最近发现了一款非常好玩的二次元Web在线聊天系统，自己尝试搭建了一下，整体来说难度不大，而且很有意思，所以就想着写一篇教程。</p><p>感兴趣的可以尝试一下，搭建完可以拉朋友进来玩。</p>          </div><hr><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p>Github地址：<a href="https://github.com/yinxin630/fiora" target="_blank" rel="noopener">https://github.com/yinxin630/fiora</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Fiora</code>是一款偏二次元的<code>Web</code>多人在线聊天应用，使用<code>Node.js</code>、<code>Mongodb</code>、<code>Socket.io</code>和<code>React</code>编写，使用体验很好，挺新颖。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>好友，群组，私聊，群聊</li><li>文本，图片，代码，url等多种类型消息</li><li>贴吧表情，滑稽表情，搜索表情包</li><li>桌面通知，声音提醒，<code>语音播报</code></li><li>自定义桌面背景，主题颜色，文本颜色</li><li>查看在线用户，<code>@</code>功能</li><li>小黑屋禁言</li></ul><h1 id="宝塔搭建"><a href="#宝塔搭建" class="headerlink" title="宝塔搭建"></a>宝塔搭建</h1><div class="note warning">            <p><code>512M</code>内存<code>vps</code>可能还需要先加一点虚拟内存，不然构建过程会失败，可以使用<code>swap</code>一键脚本</p>          </div><p><strong>运行命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><p>然后根据选项进行操作，记得添加<code>swap</code>的时候填写纯数字，默认单位为<code>M</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/01/73b2f08e10179.png" alt></p><h2 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#CentOS系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line">#Ubuntu系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br><span class="line">#Debian系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>安装完成后，进入面板，点击左侧软件商店，然后安装<code>PM2管理器</code>、<code>MongoDB</code>、<code>Nginx</code>(使用域名访问才需要安装，否则不用)。</p><h2 id="安装Fiora"><a href="#安装Fiora" class="headerlink" title="安装Fiora"></a>安装Fiora</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#拉取源码并存放于&#x2F;opt文件夹</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;yinxin630&#x2F;fiora.git -b master &#x2F;opt&#x2F;fiora</span><br><span class="line">cd &#x2F;opt&#x2F;fiora</span><br><span class="line">#安装依赖，这里不能用npm，需要用yarn来安装</span><br><span class="line">npm i -g yarn</span><br><span class="line">yarn</span><br><span class="line">#构建</span><br><span class="line">npm run build</span><br><span class="line">#转移产物</span><br><span class="line">npm run move-dist</span><br><span class="line">#启动</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>运行后打开<code>ip:9200</code>，注册一个账号，然后可以看<code>SSH客户端</code>运行日志，获取自己的<code>userId</code>。得到如下图的输出：</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/01/66cc3420e0ebe.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#这里注册或登录的时候返回的信息，后面的**5ed5106b96864aa333a39e49**则为自己的**userId**</span><br><span class="line">&lt;-- **getLinkmansLastMessages rx6jrIRF9lhHP7h4AAAA 5ed5106b96864aa333a39e49**</span><br></pre></td></tr></table></figure><p>如果<code>ip:9200</code>打不开的，可以检查下防火墙，<code>CentOS</code>系统可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#CentOS 6</span><br><span class="line">iptables -I INPUT -p tcp --dport 9200 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line">#CentOS 7</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;9200&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>像阿里云等，还需要额外在安全组开放端口。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/01/886ac2768d9ad.png" alt></p><p>接下来再将自己的账号设置成管理员，先使用<code>Ctrl+C</code>断开运行。</p><p>新建<code>Systemd</code>配置文件，只适用于<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#先修改你的userId和运行端口后复制到SSH运行</span><br><span class="line">Administrator&#x3D;5ed5106b96864aa333a39e49</span><br><span class="line">Port&#x3D;9200</span><br><span class="line">#新建fiora用户并授权</span><br><span class="line">useradd -M fiora &amp;&amp; usermod -L fiora</span><br><span class="line">chown -R fiora:fiora &#x2F;opt&#x2F;fiora</span><br><span class="line">#先给node做个软连接，不然后面会启动失败</span><br><span class="line">ln -sf $(which node) &#x2F;usr&#x2F;bin&#x2F;node</span><br><span class="line">#以下命令一起复制进SSH客户端运行</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;fiora.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;fiora</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Wants&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">PIDFile&#x3D;&#x2F;var&#x2F;run&#x2F;fiora.pid</span><br><span class="line">ExecStart&#x3D;$(command -v npm) start</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;opt&#x2F;fiora</span><br><span class="line">Environment&#x3D;NODE_ENV&#x3D;production Administrator&#x3D;$Administrator Port&#x3D;$Port</span><br><span class="line">User&#x3D;fiora</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>开始启动并设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start fiora</span><br><span class="line">systemctl enable fiora</span><br></pre></td></tr></table></figure><p>其它系统，比如<code>CentOS</code>、<code>Debian 7</code>等系统，可以直接使用以下方法启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#管理员userId和运行端口自行修改</span><br><span class="line">export Administrator&#x3D;5ed5106b96864aa333a39e49 Port&#x3D;9200</span><br><span class="line">nohup npm start &amp;</span><br></pre></td></tr></table></figure><p>此时就可以访问<code>ip:9200</code>，运行端口以你设置的为准，这时候你登陆的时候，会发现左侧多了个管理员图标。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/01/847e75f490e98.png" alt></p><h2 id="域名反代"><a href="#域名反代" class="headerlink" title="域名反代"></a>域名反代</h2><p>先点击左侧网站，添加站点，然后再点击添加好了的域名名称，这时候就进入了站点配置，点击反向代理，添加反向代理，格式如图：</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/06/01/594ec38d61064.png" alt></p><div class="note primary no-icon">            <p>侧边栏可以在网站根目录/<code>opt</code>/<code>fiora</code>/<code>public</code>/<code>js</code>/<code>app.a0d840f0.js</code>修改</p>          </div><h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><div class="note primary no-icon">            <p>所需环境：<code>Nodejs &gt;= 8.9.0</code>、<code>Mongodb</code>。</p>          </div><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Debian&#x2F;Ubuntu系统</span><br><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_10.x | bash -</span><br><span class="line">apt install -y git nodejs </span><br><span class="line"></span><br><span class="line">#CentOS系统</span><br><span class="line">curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_10.x | bash -</span><br><span class="line">yum install nodejs git -y</span><br></pre></td></tr></table></figure><h2 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#CentOS 6系统，将下面命令一起复制进SSH客户端运行</span><br><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo</span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name&#x3D;MongoDB Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;repo.mongodb.org&#x2F;yum&#x2F;redhat&#x2F;6&#x2F;mongodb-org&#x2F;4.0&#x2F;x86_64&#x2F;</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-4.0.asc</span><br><span class="line">EOF</span><br><span class="line">yum -y install mongodb-org</span><br><span class="line"></span><br><span class="line">#CentOS 7系统，将下面命令一起复制进SSH客户端运行</span><br><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo</span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name&#x3D;MongoDB Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;repo.mongodb.org&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;mongodb-org&#x2F;4.0&#x2F;x86_64&#x2F;</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-4.0.asc</span><br><span class="line">EOF</span><br><span class="line">yum -y install mongodb-org</span><br><span class="line"></span><br><span class="line">#Debian 8系统</span><br><span class="line">apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;debian jessie&#x2F;mongodb-org&#x2F;4.0 main&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.0.list</span><br><span class="line">apt update -y</span><br><span class="line">apt install -y mongodb-org</span><br><span class="line"></span><br><span class="line">#Debian 9系统</span><br><span class="line">curl https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-4.0.asc | apt-key add -</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;debian stretch&#x2F;mongodb-org&#x2F;4.0 main&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.0.list</span><br><span class="line">apt-get update -y</span><br><span class="line">apt-get install -y mongodb-org</span><br><span class="line"></span><br><span class="line">#Debian 10系统</span><br><span class="line">curl https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-4.2.asc | apt-key add -</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;debian buster&#x2F;mongodb-org&#x2F;4.2 main&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.2.list</span><br><span class="line">apt update -y</span><br><span class="line">apt install -y mongodb-org</span><br><span class="line"></span><br><span class="line">#Ubuntu 16.04系统</span><br><span class="line">apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br><span class="line">echo &quot;deb https:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;ubuntu xenial&#x2F;mongodb-org&#x2F;4.0 multiverse&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.0.list</span><br><span class="line">apt update -y</span><br><span class="line">apt install -y mongodb-org</span><br><span class="line"></span><br><span class="line">#Ubuntu 18.04、18.10、19.04系统</span><br><span class="line">apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br><span class="line">echo &quot;deb https:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;ubuntu bionic&#x2F;mongodb-org&#x2F;4.0 multiverse&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.0.list</span><br><span class="line">apt update -y</span><br><span class="line">apt install -y mongodb-org</span><br></pre></td></tr></table></figure><div class="note danger">            <p>如果导入公匙时出现<code>gnupg, gnupg2 and gnupg1 do not seem to be installed</code>错误，使用<code>apt install -y gnupg2</code>，然后重新导入即可。</p>          </div><p>启动<code>Mongodb</code>并设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#CentOS 6系统</span><br><span class="line">service mongod start</span><br><span class="line">chkconfig mongod on</span><br><span class="line"></span><br><span class="line">#CentOS 7、Debian、Ubuntu系统</span><br><span class="line">systemctl start mongod</span><br><span class="line">systemctl enable mongod</span><br></pre></td></tr></table></figure><h2 id="安装Fiora-1"><a href="#安装Fiora-1" class="headerlink" title="安装Fiora"></a>安装Fiora</h2><p>安装步骤和宝塔安装相同，这边就不再重复了。</p><h2 id="域名反代-1"><a href="#域名反代-1" class="headerlink" title="域名反代"></a>域名反代</h2><p>如果你想使用域名的话，这里使用<code>Caddy</code>反代，操作如下：</p><p>安装<code>Caddy</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Caddy&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure><p>配置<code>Caddy</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#以下全部内容是一个整体，请修改域名后一起复制到SSH运行！</span><br><span class="line"></span><br><span class="line">#http访问，该配置不会自动签发SSL</span><br><span class="line">echo &quot;www.moerats.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> proxy &#x2F; 127.0.0.1:9200 &#123;</span><br><span class="line">    websocket</span><br><span class="line">    header_upstream Host &#123;host&#125;</span><br><span class="line">    header_upstream X-Real-IP &#123;remote&#125;</span><br><span class="line">    header_upstream X-Forwarded-For &#123;remote&#125;</span><br><span class="line">    header_upstream X-Forwarded-Port &#123;server_port&#125;</span><br><span class="line">    header_upstream X-Forwarded-Proto &#123;scheme&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&quot; &gt; &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;Caddyfile</span><br><span class="line"></span><br><span class="line">#https访问，该配置会自动签发SSL，请提前解析域名到VPS服务器</span><br><span class="line">echo &quot;www.moerats.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls admin@moerats.com</span><br><span class="line"> proxy &#x2F; 127.0.0.1:9200 &#123;</span><br><span class="line">    websocket</span><br><span class="line">    header_upstream Host &#123;host&#125;</span><br><span class="line">    header_upstream X-Real-IP &#123;remote&#125;</span><br><span class="line">    header_upstream X-Forwarded-For &#123;remote&#125;</span><br><span class="line">    header_upstream X-Forwarded-Port &#123;server_port&#125;</span><br><span class="line">    header_upstream X-Forwarded-Proto &#123;scheme&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&quot; &gt; &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;Caddyfile</span><br></pre></td></tr></table></figure><p><code>tls</code>参数会自动帮你签发<code>ssl</code>证书，如果你要使用自己的<code>ssl</code>，改为<code>tls /root/xx.crt /root/xx.key</code>即可。后面为<code>ssl</code>证书路径。</p><p>启动<code>Caddy</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;caddy start</span><br></pre></td></tr></table></figure><p>就可以打开域名进行访问了。</p><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>博主感觉这个程序做的还是挺好的，可以搭建一个给朋友玩玩。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiora </tag>
            
            <tag> Web在线聊天系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Heroku环境下配置安装OLAINDEX</title>
      <link href="/Heroku.html"/>
      <url>/Heroku.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>之前写过一篇宝塔面板部署OLAINEX的教程-&gt; <a href="https://noshore.cn/olaindex.html">传送门</a>，当时是用的宝塔安装，需要服务器，这次就来讲一个免费的方法。</p>          </div><hr><h1 id="Heroku环境准备"><a href="#Heroku环境准备" class="headerlink" title="Heroku环境准备"></a>Heroku环境准备</h1><h2 id="什么是-Heroku？"><a href="#什么是-Heroku？" class="headerlink" title="什么是 Heroku？"></a>什么是 Heroku？</h2><p>Heroku是一个支持多种编程语言的PaaS(Platform-as-a-Service)。在2010年被Salesforce收购。Heroku作为最开始的云平台之一，从2007年6月起开始开发，当时它仅支持Ruby，后来增加了对Java、Node.js、Scala、Clojure、Python以及PHP和Perl的支持。</p><h2 id="为什么选用-Heroku？"><a href="#为什么选用-Heroku？" class="headerlink" title="为什么选用 Heroku？"></a>为什么选用 Heroku？</h2><ul><li>Heroku 的部署上线流程异常简单。你只需要将源代码纳入到Git版本控制系统中即可，其它额外操作Heroku都会帮你自动处理好。</li><li>Heroku提供给开发者的免费套餐非常丰富。其中包括最多5个应用的免费创建，自定义域名的支持等。实乃良心商家。唯一的不足就是有时候在国内访问速度会比较慢。</li><li>Heroku产品服务在业内评价特别高。在Rails圈子中许多有经验的开发者都会使用Heroku来部署上线自己的Demo应用，其部署流程和速度都受到了Rails社区成员的广大好评。</li></ul><h2 id="Heroku的基本安装及配置"><a href="#Heroku的基本安装及配置" class="headerlink" title="Heroku的基本安装及配置"></a>Heroku的基本安装及配置</h2><p>首先我们先 注册一个<code>Heroku</code>账号。</p><p>注册完成之后使用<code>Heroku Toolbelt</code>来安装<code>Heroku</code>客户端。</p><p>安装完毕后使用<code>heroku version</code>来检查当前系统是否已安装好<code>Heroku</code>客户端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku version</span><br></pre></td></tr></table></figure><p>如果有类似下面的输出，则代表<code>Heroku</code>客户端已成功安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku version</span><br><span class="line">heroku&#x2F;7.18.3 win32-x64 node-v10.12.0</span><br></pre></td></tr></table></figure><p>安装成功之后，你需要使用以下命令来登录你的<code>Heroku</code>账号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login</span><br></pre></td></tr></table></figure><p>然后添加<code>SSH密钥</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku keys:add</span><br></pre></td></tr></table></figure><div class="note success">            <p>至此，Heroku 的基本安装及配置已完成。下一步我们开始尝试将应用部署到 Heroku 上。</p>          </div><h1 id="部署OLAINDEX到Heroku上"><a href="#部署OLAINDEX到Heroku上" class="headerlink" title="部署OLAINDEX到Heroku上"></a>部署OLAINDEX到Heroku上</h1><h2 id="新建OLAINDEX项目"><a href="#新建OLAINDEX项目" class="headerlink" title="新建OLAINDEX项目"></a>新建OLAINDEX项目</h2><h3 id="新建OLAINDEX项目目录并从Composer拉取创建包"><a href="#新建OLAINDEX项目目录并从Composer拉取创建包" class="headerlink" title="新建OLAINDEX项目目录并从Composer拉取创建包"></a>新建OLAINDEX项目目录并从Composer拉取创建包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer create-project wangningkai&#x2F;olaindex olaindex &quot;dev-master&quot;</span><br><span class="line">cd olaindex</span><br></pre></td></tr></table></figure><h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;new OLAINDEX project&quot;</span><br></pre></td></tr></table></figure><h3 id="创建Procfile"><a href="#创建Procfile" class="headerlink" title="创建Procfile"></a>创建Procfile</h3><p>要将应用部署到Heroku上，你需要新建一个<code>Procfile</code>文件，这个文件的作用是通过正确的配置来告诉Heroku应用应当使用什么命令来启动Web服务器。</p><p>将配置写入<code>Procfile</code>文件并将其纳入Git版本控制中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo web: vendor&#x2F;bin&#x2F;heroku-php-apache2 public&#x2F; &gt; Procfile</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;Procfile for Heroku&quot;</span><br></pre></td></tr></table></figure><h2 id="在Heroku上创建一个新应用"><a href="#在Heroku上创建一个新应用" class="headerlink" title="在Heroku上创建一个新应用"></a>在Heroku上创建一个新应用</h2><p>我们可以使用<code>heroku create</code>命令在Heroku上创建一个新应用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku create</span><br></pre></td></tr></table></figure><p>命令行会输出类似如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Creating xxxx-xxx-1234... done, stack is cedar-14</span><br><span class="line">http:&#x2F;&#x2F;xxxx-xxx-1234.herokuapp.com&#x2F; | git@heroku.com:xxxx-xxx-1234.git</span><br><span class="line">Git remote heroku added</span><br></pre></td></tr></table></figure><p><code>mighty-hamlet-1982</code>是Heroku随机为应用生成的默认名称，每个人生成的名称都不相同。<a href="http://xxxx-xxx-1234.herokuapp.com/" target="_blank" rel="noopener">http://xxxx-xxx-1234.herokuapp.com/</a> 则是应用的线上地址。</p><p>如果你对生成的默认名称不满意，你可以使用<code>heroku rename</code>来对应用名称进行更改，但要保证更改的名称未被其它人占用。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku rename imwnk-olaindex</span><br></pre></td></tr></table></figure><h2 id="声明buildpack"><a href="#声明buildpack" class="headerlink" title="声明buildpack"></a>声明buildpack</h2><p>Heroku对多种语言进行了支持，因此在应用部署的时候它会去自动检查应用的代码是用什么语言写的，然后再接着执行一系列针对该语言的操作。Laravel的应用默认会包含<code>package.json</code>文件，但当Heroku检查到该文件时，它会认为此应用是用Node.js写的，因此我们需要对应用的<code>buildpack</code>进行声明，告诉Heroku我们的应用是用PHP写的。声明命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku buildpacks:set heroku&#x2F;php</span><br></pre></td></tr></table></figure><h2 id="设置APP-key及绑定域名"><a href="#设置APP-key及绑定域名" class="headerlink" title="设置APP key及绑定域名"></a>设置APP key及绑定域名</h2><p>Laravel使用App Key来完成对用户会话及其它信息的编码加密操作，因此我们也需要将App Key加入到Heroku的配置中。</p><p>这里直接打开刚才创建目录中的<code>.env</code>文件，复制<code>APP_KEY</code>参数。 将复制的<code>APP_KEY</code>附加到此命令行后面以完成配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku config:set APP_KEY&#x3D;xxx</span><br></pre></td></tr></table></figure><p>同样由于授权登录，需要验证绑定域名，这里需要设置一下<code>APP_URL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku config:set APP_URL&#x3D;xxx</span><br></pre></td></tr></table></figure><p>此外还需要配置其他环境变量，如数据库配置</p><p>参考此图填写</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/31/7f77d5ad3af2a.png" alt></p><h2 id="将应用推送到Heroku上"><a href="#将应用推送到Heroku上" class="headerlink" title="将应用推送到Heroku上"></a>将应用推送到Heroku上</h2><p>接下来，让我们把代码部署到Heroku上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure><p>有类似如下输出则代表代码推送成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">Enumerating objects: 2010, done.</span><br><span class="line">Counting objects: 100% (2010&#x2F;2010), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (637&#x2F;637), done.</span><br><span class="line">Writing objects: 100% (1934&#x2F;1934), 301.98 KiB | 20.13 MiB&#x2F;s, done.</span><br><span class="line">Total 1934 (delta 1332), reused 1872 (delta 1271)</span><br><span class="line">remote: Compressing source files... done.</span><br><span class="line">remote: Building source:</span><br><span class="line">remote:</span><br><span class="line">remote: -----&gt; PHP app detected</span><br><span class="line">remote: -----&gt; Bootstrapping...</span><br><span class="line">remote: -----&gt; Installing platform packages...</span><br><span class="line">remote:        - php (7.2.11)</span><br><span class="line">remote:        - ext-mbstring (bundled with php)</span><br><span class="line">remote:        - nginx (1.8.1)</span><br><span class="line">remote:        - apache (2.4.34)</span><br><span class="line">remote: -----&gt; Installing dependencies...</span><br><span class="line">remote:        Composer version 1.7.2 2018-08-16 16:57:12</span><br><span class="line">remote:        Loading composer repositories with package information</span><br><span class="line">remote:        Installing dependencies from lock file</span><br><span class="line">remote:        Package operations: 48 installs, 0 updates, 0 removals</span><br><span class="line">remote:          - Installing doctrine&#x2F;inflector (v1.3.0): Loading from cache</span><br><span class="line">remote:          - Installing doctrine&#x2F;lexer (v1.0.1): Loading from cache</span><br><span class="line">remote:          - Installing dragonmantank&#x2F;cron-expression (v2.2.0): Loading from cache</span><br><span class="line">remote:          - Installing erusev&#x2F;parsedown (1.7.1): Loading from cache</span><br><span class="line">remote:          - Installing vlucas&#x2F;phpdotenv (v2.5.1): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;css-selector (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing tijsverkoyen&#x2F;css-to-inline-styles (2.2.1): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;polyfill-php72 (v1.9.0): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;polyfill-mbstring (v1.9.0): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;var-dumper (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;routing (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;process (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;polyfill-ctype (v1.9.0): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;http-foundation (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;event-dispatcher (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing psr&#x2F;log (1.0.2): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;debug (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;http-kernel (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;finder (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;console (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing egulias&#x2F;email-validator (2.1.6): Loading from cache</span><br><span class="line">remote:          - Installing swiftmailer&#x2F;swiftmailer (v6.1.3): Loading from cache</span><br><span class="line">remote:          - Installing paragonie&#x2F;random_compat (v9.99.99): Loading from cache</span><br><span class="line">remote:          - Installing ramsey&#x2F;uuid (3.8.0): Loading from cache</span><br><span class="line">remote:          - Installing psr&#x2F;simple-cache (1.0.1): Loading from cache</span><br><span class="line">remote:          - Installing psr&#x2F;container (1.0.0): Loading from cache</span><br><span class="line">remote:          - Installing opis&#x2F;closure (3.1.1): Loading from cache</span><br><span class="line">remote:          - Installing symfony&#x2F;translation (v4.1.6): Loading from cache</span><br><span class="line">remote:          - Installing nesbot&#x2F;carbon (1.34.0): Loading from cache</span><br><span class="line">remote:          - Installing monolog&#x2F;monolog (1.23.0): Loading from cache</span><br><span class="line">remote:          - Installing league&#x2F;flysystem (1.0.48): Loading from cache</span><br><span class="line">remote:          - Installing laravel&#x2F;framework (v5.7.12): Loading from cache</span><br><span class="line">remote:          - Installing fideloper&#x2F;proxy (4.0.0): Loading from cache</span><br><span class="line">remote:          - Installing guzzlehttp&#x2F;promises (v1.3.1): Loading from cache</span><br><span class="line">remote:          - Installing psr&#x2F;http-message (1.0.1): Loading from cache</span><br><span class="line">remote:          - Installing guzzlehttp&#x2F;psr7 (1.4.2): Loading from cache</span><br><span class="line">remote:          - Installing jakub-onderka&#x2F;php-console-color (v0.2): Loading from cache</span><br><span class="line">remote:          - Installing nikic&#x2F;php-parser (v4.1.0): Loading from cache</span><br><span class="line">remote:          - Installing jakub-onderka&#x2F;php-console-highlighter (v0.3.2): Loading from cache</span><br><span class="line">remote:          - Installing dnoegel&#x2F;php-xdg-base-dir (0.1): Loading from cache</span><br><span class="line">remote:          - Installing psy&#x2F;psysh (v0.9.9): Loading from cache</span><br><span class="line">remote:          - Installing laravel&#x2F;tinker (v1.0.8): Loading from cache</span><br><span class="line">remote:          - Installing guzzlehttp&#x2F;guzzle (6.3.3): Loading from cache</span><br><span class="line">remote:          - Installing league&#x2F;oauth2-client (dev-master 15afb12): Loading from cache</span><br><span class="line">remote:          - Installing microsoft&#x2F;microsoft-graph (1.5.0): Loading from cache</span><br><span class="line">remote:          - Installing caouecs&#x2F;laravel-lang (3.0.56): Loading from cache</span><br><span class="line">remote:          - Installing overtrue&#x2F;laravel-lang (3.0.13): Loading from cache</span><br><span class="line">remote:          - Installing predis&#x2F;predis (v1.1.1): Loading from cache</span><br><span class="line">remote:        Generating optimized autoload files</span><br><span class="line">remote:        &gt; Illuminate\Foundation\ComposerScripts::postAutoloadDump</span><br><span class="line">remote:        &gt; @php artisan package:discover</span><br><span class="line">remote:        Discovered Package: fideloper&#x2F;proxy</span><br><span class="line">remote:        Discovered Package: laravel&#x2F;tinker</span><br><span class="line">remote:        Discovered Package: nesbot&#x2F;carbon</span><br><span class="line">remote:        Discovered Package: overtrue&#x2F;laravel-lang</span><br><span class="line">remote:        Package manifest generated successfully.</span><br><span class="line">remote: -----&gt; Preparing runtime environment...</span><br><span class="line">remote: -----&gt; Checking for additional extensions to install...</span><br><span class="line">remote: -----&gt; Discovering process types</span><br><span class="line">remote:        Procfile declares types -&gt; web</span><br><span class="line">remote:</span><br><span class="line">remote: -----&gt; Compressing...</span><br><span class="line">remote:        Done: 19.2M</span><br><span class="line">remote: -----&gt; Launching...</span><br><span class="line">remote:        Released v5</span><br><span class="line">remote:        https:&#x2F;&#x2F;imwnk-olaindex.herokuapp.com&#x2F; deployed to Heroku</span><br><span class="line">remote:</span><br><span class="line">remote: Verifying deploy... done.</span><br><span class="line">To https:&#x2F;&#x2F;git.heroku.com&#x2F;imwnk-olaindex.git</span><br><span class="line">   ab88070..42cd315  master -&gt; master</span><br></pre></td></tr></table></figure><p>代码推送成功之后，使用此命令可快速打开线上应用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku open</span><br></pre></td></tr></table></figure><p>接下来进入命令行执行数据库迁移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ heroku run bash</span><br><span class="line">$ php artisan migrate</span><br><span class="line">$ php artisan db:seeder</span><br></pre></td></tr></table></figure><p>执行完毕后</p><p>至此，我们便完成 OLAINDEX 应用的部署。</p><h1 id="OLAINDEX配置"><a href="#OLAINDEX配置" class="headerlink" title="OLAINDEX配置"></a>OLAINDEX配置</h1><p>访问我们的域名，就可以配置相关信息了！</p><p>具体参考之前写的文章<a href="https://noshore.cn/olaindex.html">宝塔面板搭建OneDrive目录程序OLAINDEX</a>中第7点<a href="https://noshore.cn/olaindex.html#%E9%85%8D%E7%BD%AE%E7%A8%8B%E5%BA%8F">配置程序</a>，这里便不再重复了。</p><h1 id="免费限制"><a href="#免费限制" class="headerlink" title="免费限制"></a>免费限制</h1><div class="note warning">            <p>Heroku免费版有一个限制，如果APP30分钟没人访问就会设置成休眠状态！</p>          </div><p>破解也简单，网上有好多免费的网站监控。随便找一个监控一下就可以了！比如阿里云的云监控！</p><h1 id="更新仓库"><a href="#更新仓库" class="headerlink" title="更新仓库"></a>更新仓库</h1><p>熟悉git的用户可以直接将本项目的github仓库，添加到本地的remotes，这样github更新就可以拉取并将其合并到heroku仓库里，再重新进行更新。注意更新后要进行重新部署项目。不过免费的空间肯定需要折腾点。</p><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><div class="note primary no-icon">            <p>Heroku也可以直接对接Github部署静态博客，感兴趣的可以去尝试，不管怎么样，白嫖的还是比较香的！</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 目录程序 </category>
          
          <category> 静态空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态空间 </tag>
            
            <tag> Github </tag>
            
            <tag> OneDrive </tag>
            
            <tag> OLAINDEX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fast.io免费静态空间/目录程序，支持OneDrive/Google Drive/Github等</title>
      <link href="/Fast-io.html"/>
      <url>/Fast-io.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p><code>Fast.io</code>由创建MediaFire的同一团队构建，MediaFire是Internet上最大的云存储和文件共享平台之一。</p><p>亲测了一下效果还挺不错！套的是<code>Cloudflare</code>的SSL！国内下载速度还算比较理想！关键是免费！！</p><p>管理面板功能挺多，自定义域名，模式切换，访问统计！</p>          </div><hr><h1 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h1><p>&ensp;&ensp;<a href="https://fast.io" target="_blank" rel="noopener">https://fast.io</a></p><h1 id="免费额度"><a href="#免费额度" class="headerlink" title="免费额度"></a>免费额度</h1><ul><li>创建5个站点</li><li>单个文件最大500M</li><li>每个月100G流量</li></ul><h1 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h1><p><code>Google Drive</code>/<code>Dropbox</code>/<code>BOX</code>/<code>OneDrive</code>/<code>MediaFire</code>/<code>Github</code></p><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><a href="https://noshore.imfast.io/c02206c4-63ef-453f-bc61-aa1880640969.mp4" target="_blank" rel="noopener">https://noshore.imfast.io/c02206c4-63ef-453f-bc61-aa1880640969.mp4</a></p><div class="note primary no-icon">            <p>这是一个演示视频，仅供测试速度。</p>          </div><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>点击<a href="https://go.fast.io/signup/" target="_blank" rel="noopener">注册</a>，填写邮箱密码即可~</p><h2 id="新建站点"><a href="#新建站点" class="headerlink" title="新建站点"></a>新建站点</h2><p>站点名称填自己想要的</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/29/fd92e12bf1317.png" alt></p><h2 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h2><p>选择一个网盘对接，之后按步骤授权即可！</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/29/198b9d313c489.png" alt></p><h2 id="自定义URL"><a href="#自定义URL" class="headerlink" title="自定义URL"></a>自定义URL</h2><p>填入你想要的二级域名，作为你站点的访问链接</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/29/ef137bb832637.png" alt></p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>到这里就成功对接OneDrive了</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/29/4a8950739c204.png" alt></p><div class="note success">            <p>这个也可以对接Github做静态站点，这边就不演示了，应该也是很简单的。另外，貌似在后台启动了<code>Render index files</code>就可以将<code>index.html</code>文件存在网盘，同样可以做成静态站点。</p>          </div><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p><code>Fast.io</code>我体验下来感觉还是不错的，延迟略高一点，不过速度还是很不错的，平均1M/s左右！无论做静态站或者文件分享都可以！文件同步也很快，同时支持手动点击同步。</p><p>如果你本身没有服务器，这会是一个不错的选择。不过该服务同步文件时会调用<code>OneDrive API</code>，但是发布成功后，应该不会重复调用API（猜测）想利用这个刷E5可能存在问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 目录程序 </category>
          
          <category> 静态空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态空间 </tag>
            
            <tag> Github </tag>
            
            <tag> OneDrive </tag>
            
            <tag> Google Drive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+jsDelivr+PicGo搭建免费图床</title>
      <link href="/Github-jsDelivr.html"/>
      <url>/Github-jsDelivr.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>之前写过一篇<a href="https://noshore.cn/picgo.html">利用码云Gitee+PicGo搭建个人图床</a>，当时说到了要写一篇用Github做图床的教程，一直拖到了现在，今天就来讲解一下怎么实现。</p><p>本篇文章主要讲解如何使用<code>PicGo</code>上传并使用<code>jsDelivr</code>加速，当然你也可以手动上传或者加速其他静态文件。</p>          </div><p>jsDelivr是一个比较好的CDN平台，官方号称<code>jsDelivr – Open Source CDN free, fast, and reliable</code>，简单来说就是开源的CDN，免费、快、可靠。</p><hr><h1 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h1><ul><li>目前GITHUB仓库容量是没有上限的！不过官方推荐在1G以内！</li><li>仓库单个文件50M会收到警告，大于100M会被拒绝！</li><li>jsDelivr仅能针对50M以下的文件CDN加速！</li></ul><p>放一个测试图：<a href="https://cdn.jsdelivr.net/gh/noshore/cdn/img/20200527224639.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/noshore/cdn/img/20200527224639.jpg</a></p><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>当然，首先你得有个Github的帐号。</p><p>新建一个<code>仓库</code>，填写<code>仓库名</code>，将权限设置成<code>public</code>，根据需求选择是否为仓库初始化一个<code>README.md</code>描述文件。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/d349dc1d04676.png" alt></p><h1 id="生成Token"><a href="#生成Token" class="headerlink" title="生成Token"></a>生成Token</h1><p>点击用户头像 -&gt; 选择<code>Settings</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/12d8ea3d19678.png" alt></p><p>点击<code>Developer settings</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/ccf6885724210.png" alt></p><p>点击<code>Personal access tokens</code>并点击<code>Generate new token</code>新建一个<code>Token</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/e8d2b4a115996.png" alt></p><p>填写<code>Token</code>描述，勾选<code>repo</code>，然后点击<code>Generate token</code>生成一个<code>Token</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/b4a9fbff346e7.png" alt></p><h1 id="获取Token密钥"><a href="#获取Token密钥" class="headerlink" title="获取Token密钥"></a>获取Token密钥</h1><p>生成之后会显示Token的密钥，复制保存好。</p><div class="note warning">            <p>注意这个<code>Token</code>只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页。</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/e05994c7c2db9.png" alt></p><h1 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h1><p>进入<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">PicGo官网</a>下载，由于github的问题下载速度较慢，在这里放上博主已经下载好上传到百度网盘的。</p><p>链接:<a href="https://pan.baidu.com/s/115MA7FdskRM2Rapd4RsBmg" target="_blank" rel="noopener">https://pan.baidu.com/s/115MA7FdskRM2Rapd4RsBmg</a> 提取码:a336</p><ul><li>设定仓库名：按照<code>用户名/图床仓库名</code>的格式填写</li><li>设定分支名：<code>master</code></li><li>设定 Token：粘贴之前生成的<code>Token</code></li><li>指定存储路径：填写想要储存的路径，如<code>img/</code>，这样就会在仓库下创建一个名为<code>img</code>的文件夹，图片将会储存在此文件夹中。</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo会按照<code>自定义域名+上传的图片名</code>的方式生成访问链接，放到粘贴板上，因为我们要使用<code>jsDelivr</code>加速访问，所以可以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></li></ul><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/51eec9b01a9d5.png" alt></p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p>配置完成之后，只需要将图片拖动上传即可，然后在相册区可以复制链接了。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/dbd0f1d245a40.png" alt></p><h1 id="手动上传"><a href="#手动上传" class="headerlink" title="手动上传"></a>手动上传</h1><p>这边讲另一种方式——手动上传</p><p>上传图片之后，发布一个<code>release</code>。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/27/6b8dca81e60a9.png" alt></p><p>官方的访问方法就是：</p><p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名或版本号/文件名</code></p><p>例如我在repo根目录下传了一张名为<code>1.jpg</code>的图片，那么文件链接就是</p><p><code>https://cdn.jsdelivr.net/gh/noshore/cdn@1.0/1.jpg</code></p><p>上面说了也可以不创建<code>releases</code>，就直接用分支代替版本号也是可以的。</p><p><code>https://cdn.jsdelivr.net/gh/noshore/cdn@master/1.jpg</code></p><p>jsdelivr也可以直接获取仓库目录，格式如下。</p><p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名或版本号/</code></p><div class="note info">            <p>如果直接使用分支进行访问，例：<code>https://cdn.jsdelivr.net/gh/noshore/cdn@master/1.jpg</code>。</p><p><code>master</code>分支会有缓存，缓存应该是一天更新一次。如果想进行及时更新，可以把<code>master</code>直接改成<code>latest</code>即可。</p><p>格式如下：<code>https://cdn.jsdelivr.net/gh/jcjyxjs/cdn@latest/1.jpg</code></p>          </div><hr><div class="note warning">            <p>建议只用作静态文件加速，例如JS/CSS/Image。并不适合大文件分发，大文件分发还是移步国内各厂的对象存储。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 个人图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> PicGo </tag>
            
            <tag> jsDelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine评论部署Valine-Admin评论邮件回复系统</title>
      <link href="/Valine-Admin.html"/>
      <url>/Valine-Admin.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p>Valine Admin是Valine评论系统的扩展和增强，主要实现评论邮件通知，评论管理，垃圾评论过滤等功能。支持完全自定义的邮件通知模板。基于Akismet API实现准确的垃圾评论过滤。</p>          </div><div class="note success">            <p>本篇文章讲解的内容实现了Valine评论邮件通知，评论管理，垃圾评论过滤等功能，并解决了”因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠”这个问题。</p>          </div><hr><p>当时刚建站的时候就选择了<code>Valine</code>作为评论系统，虽然说文章不多，评论也没几个，但是有些朋友给我评论我总是错过，看到的时候已经过去很久了，我回复了他们也不知道。</p><p>所以，我就在想能不能让<code>Valine</code>评论有邮件提醒的功能，这样能够让博主和访客都及时收到提醒。于是我就上网去搜，然后发现了<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>这个项目。</p><div class="note primary no-icon">            <p>下面我们就来讲讲如何实现这个功能</p>          </div><h1 id="部署-Valine-Admin"><a href="#部署-Valine-Admin" class="headerlink" title="部署 Valine-Admin"></a>部署 Valine-Admin</h1><h2 id="登录-LeanCloud-的官网"><a href="#登录-LeanCloud-的官网" class="headerlink" title="登录 LeanCloud 的官网"></a>登录 LeanCloud 的官网</h2><p>登录无论是<a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener">国内版</a>还是<a href="https://console.leancloud.app/login.html#/signin" target="_blank" rel="noopener">国际版</a>都是可以的。</p><p>当然，首先你得有一个<code>LeanCloud帐号</code>，不过既然你已经使用Valine评论，那你肯定已经有一个账号了。</p><div class="note warning">            <p>这里需要注意一点，由于之后需要绑定云引擎域名，所以如果你登陆的是国内版，那么你的域名需要备案，否则是无法使用的。没有备案域名的话就选择国际版吧，之前已经有评论的就导出之后再导入到国际版。</p>          </div><h2 id="进入应用"><a href="#进入应用" class="headerlink" title="进入应用"></a>进入应用</h2><p>没有的先创建应用</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>依次点击左侧的云引擎 -&gt; 部署 -&gt; 项目部署 -&gt;Git 部署 -&gt; 配置 Git。然后 Git 的地址填写：<code>https : //github.com/DesertsP/Valine-Admin.git</code>。 然后再次点击 Git 部署 -&gt; 部署即可</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/ec3a132ac2729.png" alt></p><h1 id="绑定评论管理的域名"><a href="#绑定评论管理的域名" class="headerlink" title="绑定评论管理的域名"></a>绑定评论管理的域名</h1><p><strong>国内版</strong></p><p>LeanCloud不给予免费的二级域名了，因此必须绑定<code>备案域名</code>。</p><p>在设定 -&gt;域名绑定 -&gt;云引擎域名</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/4a7cc237b1f64.png" alt></p><p><strong>国际版</strong></p><p>LeanCloud 给予一个免费的二级域名，也可以绑定自己的域名。</p><p>在云引擎 -&gt;设置 -&gt;Web主机域名</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/a33a6d4f75ac6.png" alt></p><h1 id="设置域名白名单"><a href="#设置域名白名单" class="headerlink" title="设置域名白名单"></a>设置域名白名单</h1><p>已经部署好Valine的应该已经设置过了，第一次用的去安全中心设置<code>Web安全域名</code>。</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>无岸海</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://noshore.cn">https://noshore.cn</a></td><td>[必填]首页地址</td></tr><tr><td>SMTP_SERVICE</td><td>QQ</td><td>[新版支持]邮件服务提供商，支持QQ，163、126，Gmail以及<a href="https://nodemailer.com/smtp/well-known/#supported-services" target="_blank" rel="noopener">更多</a></td></tr><tr><td>SMTP_USER</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填] SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填] SMTP登录密码（QQ邮箱需要获取独立密码）</td></tr><tr><td>SENDER_NAME</td><td>无岸海</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.leanapp.cn/" target="_blank" rel="noopener">https://xxx.leanapp.cn/</a></td><td>[建议] Web主机二级域名，用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[任选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p>添加完成后<code>重启云引擎</code></p><div class="note warning">            <p>QQ邮箱SMTP登陆密码在设置 -&gt;账户 -&gt;SMTP服务 -&gt;生成授权码</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/d4852c54029c5.png" alt></p><h1 id="初始化后台管理"><a href="#初始化后台管理" class="headerlink" title="初始化后台管理"></a>初始化后台管理</h1><p>访问域名<code>https://×××.cn/sign-up</code></p><p>第一次进入会要求创建账户，注册管理员登录信息。</p><p>登陆界面长这样</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/1a9c511d1704f.png" alt></p><div class="note danger">            <p>如果直接是登录界面请先删除_User表中的所有数据！！！</p>          </div><p>以后就可以通过你的域名管理你自己的评论了</p><div class="note warning">            <p><strong>邮件提醒的坑</strong><br>如果要使用邮件通知，不需要在你的网站配置中把Notify这一项设定为true，否则只会按照设置中重置密码的模板发送而不会使用在变量中设置的模板，并且云引擎也不会发送邮件；顺带可以把verify调整为false来避免出现Valine的反人类评论验证</p>          </div><hr><p><strong>重点来了！！！</strong></p><p>LeanCloud有休眠策略，详情请看<a href="https://leancloud.cn/docs/leanengine_plan.html#hash633315134" target="_blank" rel="noopener">休眠策略</a>。</p><blockquote><p>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。<br>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是5~30 秒（视实例启动时间而定），后续访问响应速度恢复正常。<br>强制休眠：如果最近 24 小时内累计运行超过18小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 云引擎 &gt; 统计 中查看。</p></blockquote><p>关于服务器休眠唤醒的问题，以前的方法是通过自带的定时任务进行唤醒，但现在不可以了，因为官方进行限制了。因此，这边是用了一个新方法<code>GitHub Actions</code>。</p><h1 id="添加TOKEN"><a href="#添加TOKEN" class="headerlink" title="添加TOKEN"></a>添加TOKEN</h1><p>点击右上角的头像，选择<code>settings</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/64077df0a9aa5.png" alt></p><p>点击<code>Developer settings</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/8879ec6c0c8b8.png" alt></p><p>选择<code>Personal access tokens</code>，添加一个新的<code>TOKEN</code>。</p><p>这个TOKEN主要使用来启动<code>actions</code>和上传结果用的。</p><p>设置名字为<code>GITHUB_TOKEN</code>, 然后勾选<code>repo</code>,<code>admin:repo_hook</code>,<code>workflow</code>等选项，最后点击<code>Generate token</code>即可。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/bf717ec502171.png" alt></p><div class="note primary no-icon">            <p>名字请务必使用<code>GITHUB_TOKEN</code>。</p>          </div><h1 id="FORK项目"><a href="#FORK项目" class="headerlink" title="FORK项目"></a>FORK项目</h1><p>地址：<a href="https://github.com/blogimg/WakeLeanCloud" target="_blank" rel="noopener">https://github.com/blogimg/WakeLeanCloud</a></p><h1 id="添加后台地址"><a href="#添加后台地址" class="headerlink" title="添加后台地址"></a>添加后台地址</h1><p>成功FORK后，进入项目的设置。添加你的后台地址（也就是评论管理的后台地址）</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/2053f74f05744.png" alt></p><p>选择<code>Secrets</code>，添加你的地址</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/0981dc5f84fa9.png" alt></p><div class="note info">            <p>其中<code>Name</code>的名字必须为<code>SITE</code>，<code>Value</code>可以是多个地址，用英文逗号分隔。不要中文逗号，不要用中文逗号，不要用中文逗号！重要的事说三遍！</p>          </div><h1 id="手动测试"><a href="#手动测试" class="headerlink" title="手动测试"></a>手动测试</h1><p>点个<code>star</code>就能启动了，启动后请切换到<code>actions</code>，看看是否运行成功。</p><p>默认是每天8:00-24:00 时每 20 分钟运行一次。(GitHub 时间稍有延迟，大概时 2-5 分钟。)</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/933cbd9f448c0.png" alt></p><p>如果进入显示如下界面，点击<code>I understand</code>即可</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/a07e91259d623.png" alt></p><div class="note info">            <p>自己点自己的项目是手动执行一次actions。是为了测试才设计这个功能的哦！</p><p>并不是不点星这个actions就不会运行。</p>          </div><h1 id="邮件重发"><a href="#邮件重发" class="headerlink" title="邮件重发"></a>邮件重发</h1><p>由于Leancloud有强制休眠策略（如果最近 24 小时内累计运行超过 18 小时，则强制休眠），所以在上面的自动唤醒中设置的是每天8:00-24:00 时，其他时间实例处于休眠状态，邮件不会发送，这时候需要邮件重发功能。</p><p>依次点击云引擎 -&gt; 定时任务 -&gt; 创建任务</p><p>选择<code>resend-mails</code>云函数，Cron 表达式为<code>0 20 8 * * *</code>，表示每天早上8 点 20 分检查过去 24 小时内漏发的通知邮件并补发（请尽量确保你设置的时间机器是醒着的)。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/26/35e4d07c9d356.png" alt></p><div class="note warning">            <p>国际版稍有不同，Cron表达式为<code>0 20 24 * * ?</code>，表示每天早上8点20检查过去24小时内漏发的通知邮件并补发,填入之后下面会有提示，根据自己情况自行调整。</p>          </div><hr><p>至此，教程全部结束，有问题可在下方留言。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> hexo </category>
          
          <category> GitHub Actions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> Valine-Admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft 365 E5开发者订阅保命计划</title>
      <link href="/e5.html"/>
      <url>/e5.html</url>
      
        <content type="html"><![CDATA[<p>应该有很多人白嫖了微软的开发者订阅，奈何微软也不是傻子，有效期三个月，三个月后需要证明是开发者才能够续订，所以如果不能续订，单单只是用三个月，那就毫无意义。网上大佬也提出了调用api来证明是开发者的方法，实践证明确实有很多人续订了。下面我就说说我自己整理并使用的一些方法。</p><div class="note warning">            <p>这里需要注意，使用了我的这些方法并不是一定会续订，只是增大机会!!!没续订不要找我哈哈哈~</p>          </div><hr><h1 id="自建网盘或者目录程序"><a href="#自建网盘或者目录程序" class="headerlink" title="自建网盘或者目录程序"></a>自建网盘或者目录程序</h1><h2 id="网盘程序"><a href="#网盘程序" class="headerlink" title="网盘程序"></a>网盘程序</h2><p>这方面我自己用的是<code>Cloudreve</code>，界面简洁好看，功能也很多，免费开源版完全够用了。这个方法需要<code>服务器</code>，有条件感兴趣的可以去试试，之后有空的话我会写篇教程。</p><p>这边我放一个我自己搭建的演示站：<a href="https://cloud.noshore.cn" target="_blank" rel="noopener">https://cloud.noshore.cn</a></p><h2 id="目录程序"><a href="#目录程序" class="headerlink" title="目录程序"></a>目录程序</h2><p>这个我之前也写过一篇教程：<a href="https://noshore.cn/olaindex.html">宝塔面板搭建OneDrive目录程序OLAINDEX</a></p><p>我也是用服务器搭建的，不过这个不是强制服务器的，可以用一些免费空间搭建。</p><h1 id="E5SubBot"><a href="#E5SubBot" class="headerlink" title="E5SubBot"></a>E5SubBot</h1><p>有能力可以自己搭建，项目地址：<a href="https://github.com/iyear/E5SubBot" target="_blank" rel="noopener">https://github.com/iyear/E5SubBot</a></p><p>懒得搭或者不会的，这边我就提供一些现成的机器人。</p><p>首先打开tg，在搜索栏搜索@E5Sub_bot，打开后会有绑定提示，点击<code>/bind</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/26f067b97bf4b.jpg" alt></p><div class="note info">            <p>这边再提供几个机器人，你可以选择每个都绑定。<code>@officeE5_bot</code>、<code>@rsxd_bot</code>、<code>@One365E5_bot</code>、<code>@e5renew_bot</code>、<code>@e5dy_bot</code>、<code>@my_e5sub_bot</code></p>          </div><p>之后点击应用注册的直达，登陆你的Office帐号，将你的应用机密复制下来</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/3abfeda6eba81.jpg" alt><br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/d95afae4ad4ea.png" alt></p><p>接着点击下面的蓝色按钮，返回到快速启动</p><p>往下拉，将App ID复制下来（这一步其实和OLAINDEX教程里一样）</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/37ceb0a2669b0.png" alt></p><p>然后回到tg，按照格式回复即可</p><div class="note danger">            <p>错误演示<br>24b17016-b01c-4226-922f-a0046bc02492+ +axmdnRLFG87#^uuKIK926{}</p>          </div><p>之后会让我们授权账户，点击直达</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/3c44016d2e226.jpg" alt></p><p>弹出来一个界面，复制地址栏里的网站，粘贴到对话框加上空格和别名就好了。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/68524330ec3cc.png" alt></p><p>最后，出现下面的内容就是绑定成功了。如果中途机器人没反应，从头来过就好。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/8fd91173f90db.jpg" alt></p><div class="note warning">            <p>这里需要注意的是，绑定完成之后不要去执行<code>/task</code>、<code>/log</code>,会提示你不是管理员，并不是说你不是程序Office账户的管理员，只是说你不是机器人的管理员，等着就好会自动执行。</p>          </div><h1 id="E5续订程序"><a href="#E5续订程序" class="headerlink" title="E5续订程序"></a>E5续订程序</h1><p>这是一个由其他大佬开发的网页端的程序，并且所有的操作都是在他的服务器上的，本地服务器不需要跑任何东西。</p><p>地址：<a href="https://e5.qyi.io/user/login?redirect=%2Fuser%2Fhome" target="_blank" rel="noopener">https://e5.qyi.io/user/login?redirect=%2Fuser%2Fhome</a></p><p>打开网站，点击中间的Github图标并使用你的Github账号登陆</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/1355eae3c3d7f.png" alt></p><p>进入主界面，需要填写<code>client_id</code>、<code>client_secret</code></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/6608f5e737cc2.jpg" alt></p><p>然后先把这个网页放在一边，打开<a href="https://portal.azure.com/" target="_blank" rel="noopener">Azure</a>，在上面搜索<code>应用注册</code>，打开后，我们点击左上角的<code>新注册</code>，名称随便填，选择<code>任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户</code>，URI我们填写<code>https://e5.qyi.io/outlook/auth2/receive</code>，一定要填正确，否则是无法使用的！</p><p>进入页面后，我们复制上面显示的<code>应用程序（客户端）ID</code>，以供备用，接着我们点击左边的证书和密码，创建我们这个程序的密码</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/c45b11d0f897e.png" alt></p><p>在右边选择新客户端密码，描述随便填，密码我们选择从不过期，然后新建，把给我们的密码保存下来备用</p><p>接着点到API权限，点击添加权限，选择Microsoft Graph，然后选择右边的应用程序权限，勾选<code>Mail.Read</code>、<code>Mail.ReadBasic</code>、、<code>Mail.ReadWrite</code>即可，勾选后确定，点击添加权限右边的<code>代表xxx授予管理员同意</code>，一定要点，否则无法正常运行。</p><p>接着返回刚刚的那个网页，ID和机密填进去，然后点保存，接着点授权。</p><h1 id="AutoApi系列"><a href="#AutoApi系列" class="headerlink" title="AutoApi系列"></a>AutoApi系列</h1><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangziyingwen/AutoApiS" target="_blank" rel="noopener">https://github.com/wangziyingwen/AutoApiS</a></p><div class="note info">            <p>原教程已经讲的相当清楚，不过由于Github的原因，图裂了，我这边就把图放出来，教程是一样的。另外，AutoApi系列包含四个版本，可以自由选择，我是用的AutoApiS，下面讲的也是AutoApiS。</p>          </div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本项目是建立在可以正确调用api的假设上的，核心是paran/黑幕大佬的py脚本。</li><li>本项目只是提供一个自动、免费、无需额外设备的脚本运行方式，换句话说，借用github的电脑/服务器来干活。</li><li>本项目运行依赖github action服务，此功能github固有而非私人提供的服务器，且整个运行过程只涉及你与github。</li><li>请务必先阅读理解原教程的原理说明、设计理念。</li><li>不保证一定能续期！不保证一定能续期！不保证一定能续期！或者说，只是增大续订可能性。过期前、后30天都可能续期！！！</li><li>若理解并接受上述说明，请接着操作；若否，请点击浏览器右上角 X 。</li></ul><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><ul><li>全自定义版本</li><li>支持多账号、随机时间调用、api随机抽取排序、副应用模式等</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="获取应用id、机密、refresh-token"><a href="#获取应用id、机密、refresh-token" class="headerlink" title="获取应用id、机密、refresh_token"></a>获取应用id、机密、refresh_token</h3><p>1.首先去<a href="https://portal.azure.com/#home" target="_blank" rel="noopener">https://portal.azure.com/#home</a> 注册一个应用，和上一个方法（E5续订程序）一样。</p><p>先用e5管理员账号登录网站,然后在主页找到<code>Azure Active Directory</code>点进去，再在左侧目录找到点击<code>应用注册</code>，再点上方的<code>新注册</code>就会跳出一个新建应用的界面，应用名字随意填写,然后选择<code>任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户</code>，重定向url选web，填入<code>http://localhost:53682/</code>,最后点注册即可。</p><p>2.注册好应用会跳转到应用概述界面,你会看到一个<code>应用程序(客户端) ID</code>,复制这个Id记录下来，后面要用到,然后点击左侧目录的<code>API权限</code>,依次点击<code>添加权限</code>、 <code>Microsoft Graph</code> 、<code>委托的权限</code>,然后依次搜索以下几个权限并勾选:</p><p><code>Calendars.ReadWrite</code>、<code>Contacts.ReadWrite</code>、<code>Directory.ReadWrite.All</code>、</p><p><code>Files.ReadWrite.All</code>、<code>MailboxSettings.Read</code>、<code>Mail.ReadWrite</code>、</p><p><code>Notes.ReadWrite.All</code>、<code>People.Read.All</code>、<code>Sites.ReadWrite.All</code>、</p><p><code>Tasks.ReadWrite</code>、<code>User.ReadWrite.All</code></p><p>全部勾选好后点击底部的添加权限，然后又返回到了<code>API权限</code>界面，这时候你一定要再点一下<code>代表xxx授予管理员同意</code>,不点这个,outlook api会无法调用。</p><p>3.点击左侧<code>证书和密码</code>,点<code>+新客户端密码</code>,说明随便填，年限随便选多久都行,然后点<code>添加</code>,添加好后,<code>客户端密码</code>下面会有一个<code>值</code>,复制值下面的那一串代码，这是应用秘钥，后面会用到,到这一步，注册应用已经结束了。</p><p>4.windows下载rclone获取token,<a href="http://file.heimu.ltd/rclone.exe" target="_blank" rel="noopener">点击这里下载rclone</a>,随意下载到电脑的任意一个目录,下载后<code>不要双击rclone.exe安装!</code>,而是在rclone.exe同目录下,<code>按住shift后点鼠标右键</code>，选择在<code>此处打开cmd窗口</code>或<code>在此处打开power shell窗口</code>,弹出窗口后,CMD窗口就执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone authorize &quot;onedrive&quot; &quot;之前保存的应用id&quot; &quot;之前保存的应用秘钥&quot;</span><br></pre></td></tr></table></figure><p>请自行将双引号内的替换为之前我们保存的应用id和秘钥,示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone authorize &quot;onedrive&quot; &quot;729xx16f-8x70-4xb8-8fd6-1xxx9b582b1f&quot; &quot;?@P@4u&#x2F;fxxcxxx28:B-3i_QxxFxc6_ZO&quot;</span><br></pre></td></tr></table></figure><p>如果是power shell的窗口请执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\rclone authorize &quot;onedrive&quot; &quot;729xx16f-8x70-4xb8-8fd6-1xxx9b582b1f&quot; &quot;?@P@4u&#x2F;fxxcxxx28:B-3i_QxxFxc6_ZO&quot;</span><br></pre></td></tr></table></figure><p>执行后电脑浏览器会弹出一个界面,登陆自己的e5账号,然后看到浏览器显示<code>Success!</code>，说明获取token成功了。然后我们返回的cmd窗口或者power shell窗口，你会看到一大段<code>Paste the following into your remote machine ---&gt;</code>开头,<code>&lt;---End paste</code>结尾的代码，找到<code>&quot;refresh_token&quot;:&quot;</code>复制后面的代码直到<code>&quot;,&quot;expiry&quot;</code>，说白了就是复制refresh_token，不要带双引号,类似格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OAQABAAAAAABeAFzDwllzTYxxxx_qYbH8UALCVjtv_6YeHHOwXExxxxxywOKSg2Hd_GSjW1vcLzqLhDC51Sl4T2ZYfK1p64_ps3qidrodIZLkz-4f-21IfUUgQdEi-g-jIw-La9FjREuUuQnSSKgOlBAKpiwVjwPGdaO_G9yB5cLvX5zi3MZ-_ZwEVHEp-ldDGYqQiZFSnpD6G-cjQIzuN0w8lxl_9laIH0dkA1uUOKtA64qbC976OHSIaidaF4oZi_ntQIsMHWnUssYbR-2X446apxxMupLRM5oaHb8bKMTDlzk6_zUOw23y1jcb8gzyzL5IZdBVVX9UIuPrR-yuzyTd24v39OGk-I9xxhRms5vM6-vUPgxKzuIwFq_CYothdbo8ZvBuMJebl21D1UeaBerjPzxxxxxxxxxVQakxjMBHPC1ueyxR2UvRrlhHhNs8qYFBe5lzceofNWvy1QYRObT8DqCENyLa4Nb08jVTcA6Eh7oxkXtflg_xEY8ECRTWGIZ2qo4ziW70xxxxxxxvq6MCubQgOdt0qdWrc15LVV99YAl9L0KtC3ql0tMPVJBvodTNrvVqcxD-LNtnpxxx1J2tmDuc15xxxxxxTPp5MjXDhSbq8MACmRQh4dR09QqmqXps1c80pxyVkQbr8O669MQ1FMqlICTKJQ8c54_U9NWBo1rAU_zPmE841mDEFjy7dXakFkYR9IIthPNBr2nCQDdvjTitCiIwcT-NTitAd7TseSpiWg9zBsd6Q1OOcL83anZnaJ4sHy68XupeFydmjIYWZw83m96xRaw5MMHJAoyeTkwkHH9qqaSZ0mNM_PN09-tj6nUVYWf5lajMNzd_0GPfwqxxxx9LC0deo43zNTZq20f94_-HNTscKg5dJOA8jUeddxxxxLQa-ZXZV38-lxxxYL_ZDvPu5-0FP-aDTwvxxxx0F7g97o3wTrHSZw14Ra9uxniTh4gAA</span><br></pre></td></tr></table></figure><h3 id="FORK-项目"><a href="#FORK-项目" class="headerlink" title="FORK 项目"></a>FORK 项目</h3><p>登陆/新建github账号，回到<a href="https://github.com/wangziyingwen/AutoApiS" target="_blank" rel="noopener">项目页面</a>，点击右上角fork本项目的代码到你自己的账号，然后你账号下会出现一个一模一样的项目，接下来的操作均在你的这个项目下进行。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/e5f15999d0f8b.png" alt></p><h3 id="配置refresh-token"><a href="#配置refresh-token" class="headerlink" title="配置refresh_token"></a>配置refresh_token</h3><p>在你电脑上新建多个txt文本，例如你有两个账号，则账号 0 对应为 0.txt , 账号 1 对应为 1.txt , 以此类推。(只有一个账号，则只需一个0.txt，一定要从0开始数)</p><p>再把各个账号对应的refresh_token粘贴进对应的txt文件。</p><blockquote><p>refresh_token位置如图下。复制refresh_token紧接着的双引号里的内容（红竖线框起来的），不要把双引号复制进去。复制进txt后，留意结尾不要留空格或者空行</p></blockquote><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/e20bd44e54e68.png" alt></p><p>再然后把你项目token文件夹里的文件全删掉（记得点commint确认删除），再把你的0.txt…n.txt上传到token文件夹下。</p><h3 id="配置id和机密"><a href="#配置id和机密" class="headerlink" title="配置id和机密"></a>配置id和机密</h3><p>依次点击上栏 Setting &gt; Secrets &gt; Add a new secret，新建两个secret如图：ID_LIST、KEY_LIST 。</p><p>内容分别如下: ( 把账号X应用id改成你账号X的应用id , 账号X应用机密改成你账号X的机密，直接替换单引号里的内容，单引号不要动 )</p><p>(需要配置更多账号的话，以此类推，直接复制增加；如果只需一个账号，则 id_list = [r’账号0应用id’] )</p><div class="note warning">            <p>注意所有符号均是英文条件下的符号</p>          </div><p>ID_LIST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_list &#x3D; [r&#39;账号0应用id&#39;,r&#39;账号n应用id&#39;]</span><br></pre></td></tr></table></figure><p>KEY_LIST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secret_list &#x3D; [r&#39;账号0应用机密&#39;,r&#39;账号n应用机密&#39;]</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/2315dc2f56dfa.jpg" alt></p><p>最终格式应该是类似这样的：</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/1416d3c97b0b5.png" alt></p><h3 id="修改参数配置"><a href="#修改参数配置" class="headerlink" title="修改参数配置"></a>修改参数配置</h3><div class="note info">            <p>这一步看不懂的可以略过</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">各参数说明：</span><br><span class="line">  * 每次轮数：每启动一次运行多少轮api调用，一轮调用10个api</span><br><span class="line">  </span><br><span class="line">  * 是否启动随机时间：每一轮结束隔“多久”才开始下一轮调用，这个“多久”会根据后面的参数随机生成</span><br><span class="line">  </span><br><span class="line">  * 延时范围起始，结束：例如设置600跟1200，则“多久”会在600到1200秒这个范围随机生成一个数，到时间开启下一轮调用</span><br><span class="line">  </span><br><span class="line">  * 是否开启随机api顺序:根据一定规则从28个api抽13个随机排序，我设置的是30天换一次顺序。不开启则默认原教程10个api。</span><br><span class="line">  </span><br><span class="line">  * 是否开启各api延时：就是每个api调用要不要停一下才开始下一个api调用。（个人建议不开）</span><br><span class="line">    </span><br><span class="line">    同样有范围，例如：api延时范围开始跟api延时结束分别设置为10，20.则会在10到20秒这个范围随机生成一个数，然后调用下一个api</span><br><span class="line">  </span><br><span class="line">  * 是否开启各账号延时：就是每个账号调用要不要停一下才开始下一个账号调用。</span><br><span class="line">    </span><br><span class="line">    同样有范围，例如：账号延时范围开始跟分结束分别设置为60，120.则会在60到120秒这个范围随机生成一个数，然后调用下一个账号      </span><br><span class="line">  </span><br><span class="line">  * 是否开启备用应用：更换应用id调用api。同样每30天更换一次应用id。（目前每个账号只至支持1个副应用）</span><br><span class="line">  </span><br><span class="line">    开启后，需分别为各账号再注册一个应用，然后在设置的secret再增加两条：</span><br><span class="line">    ID_LIST2</span><br><span class="line">    内容为： id_list2&#x3D;[r&#39;帐号1副应用id&#39;,r&#39;帐号n副应用id&#39;]</span><br><span class="line"></span><br><span class="line">    KEY_LIST2</span><br><span class="line">    内容为： secret_list2&#x3D;[r&#39;帐号1副应用机密&#39;,r&#39;帐号n副应用机密&#39;]</span><br><span class="line">    </span><br><span class="line">    然后类似的在backuptoken文件夹里放入对应的副应用的0.txt....n.txt。</span><br><span class="line">    （这里看不懂的话，直接选N吧）</span><br><span class="line">  </span><br><span class="line">  * 是否开启测试：瞬间完成运行，以便查看id、机密、token等是否填写错误，能否正确运行。</span><br><span class="line">   （若配合备用应用模式使用，则会同时测试各账号的主副应用，看看主副应用是否都能成功调用api）</span><br><span class="line">    测试完务必改回N</span><br></pre></td></tr></table></figure><h3 id="Generate-token"><a href="#Generate-token" class="headerlink" title="Generate token"></a>Generate token</h3><p>进入你的个人设置页面(右上角头像 Settings，不是仓库里的 Settings)，选择 Developer settings &gt; Personal access tokens &gt; Generate new token,</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/eca84caeec204.jpg" alt></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/68fb7c511e1ed.jpg" alt></p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/02a8c2f5dad79.jpg" alt></p><h3 id="手动运行一次"><a href="#手动运行一次" class="headerlink" title="手动运行一次"></a>手动运行一次</h3><p>点击右上角星星/star立马调用一次，再点击上面的Action就能看到每次的运行日志，看看运行状况</p><p>（必需点进去Test Api看下，api有没有调用到位，有没有出错。外面的Auto Api打勾只能说明运行是正常的，我们还需要确认10个api调用成功了，就像图里的一样。如果少了几个api，要么是注册应用的时候赋予api权限没弄好；要么是没登录激活onedrive，登录激活一下）</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/0944af27e3420.png" alt></p><p>原脚本设定的每天9、13、16点自动运行一次（点击右上角星星/star也可以立马调用一次），你们自行斟酌修改（我也不知道保持活跃要调用多少次、多久）</p><div class="note info">            <p>定时自动启动修改地方：（在.github/workflow/autoapi.yml文件里，自行百度cron定时任务格式，最短每5分钟一次）</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/675fdd77d8032.png" alt></p><p>如果想和我一样每小时调用一次，可以照着我的格式写。</p><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/25/91d710fa808fc.png" alt></p><div class="note success">            <p>有能力的可以多管齐下，每个方法都试一下，祝大家顺利续订！</p>          </div><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>有需要Office365 A1账号的可以在下面留言，我看到会回复。另外，如果你愿意使用文中的方法进行API调用但又懒得自己开管理员账户的也可以留言。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> GitHub Actions </category>
          
          <category> Microsoft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microsoft 365 </tag>
            
            <tag> E5续订 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔面板搭建OneDrive目录程序OLAINDEX</title>
      <link href="/olaindex.html"/>
      <url>/olaindex.html</url>
      
        <content type="html"><![CDATA[<div class="note info">            <p><strong>说明：</strong> 相信很多人应该都有office365的帐号，拿着5T的<code>OneDrive</code>却无处可用，<del>有些帐号是1T，不过没差啦</del>。博主自己也有一些帐号，所以想着用来做些公开分享，就在网上搜了一下，找到了一些目录程序，例如<code>oneindex</code>、<code>olaindex</code>、<code>onelist</code>、<code>onemanager</code>等等，这方面的东西还是比较多的，最后我选择了olaindex，主要是看自己喜欢吧，其实搭建过程都差不多,会了一个就基本都会了，下面我们就来讲讲宝塔面板搭建OLAINDEX（纯奶妈教程）</p>          </div><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><code>OneDrive</code>目录索引；</li><li>基于最新<code>PHP</code>框架<code>laravel5</code>搭建而成；</li><li>基于<code>bootswatch</code>响应式页面布局，适配<code>PC</code>、平板、手机；</li></ul><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li><code>OneDrive</code> 目录查看索引分页查看；</li><li>支持代码、图片、文本文件即时预览、图片列表栏展示；</li><li>支持音视频播放（兼容大部分格式），视频播放采用 <code>Dplayer.js</code>，音乐播放采用 <code>Aplayer</code>；</li><li>支持自定义创建文件夹、文件夹加密、文件/文件夹删除、文件/文件夹的复制与移动；</li><li>支持文件搜索、文件上传、文件直链分享与删除、文件直链一键下载；</li><li>支持管理 <code>readme</code>/<code>head</code> 说明文件；</li><li>支持<code>图床</code>；</li><li>支持命令行操作；</li><li>支持<code>文件离线下载</code>（个人版）；</li><li>后台基本显示管理，多主题管理，文件预览管理等等（清理缓存后及时生效）；</li><li>支持<code>世纪互联</code>；</li><li>支持多种缓存系统（Redis、Memcached等）；</li></ul><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><ul><li><a href="https://github.com/WangNingkai/OLAINDEX" target="_blank" rel="noopener">https://github.com/WangNingkai/OLAINDEX</a></li></ul><h1 id="演示地址"><a href="#演示地址" class="headerlink" title="演示地址"></a>演示地址</h1><ul><li><a href="https://pan.noshore.cn" target="_blank" rel="noopener">https://pan.noshore.cn</a><br>这是博主自己搭的</li></ul><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PHP &gt;&#x3D; 7.1.3</span><br><span class="line">OpenSSL PHP</span><br><span class="line">PHP PDO 扩展</span><br><span class="line">PHP Mbstring 扩展</span><br><span class="line">PHP Tokenizer 扩展</span><br><span class="line">PHP XML 扩展</span><br><span class="line">PHP Ctype 扩展</span><br><span class="line">PHP JSON 扩展</span><br><span class="line">PHP Fileinfo 扩展(非必需，但最好安装)</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1、安装宝塔面板"><a href="#1、安装宝塔面板" class="headerlink" title="1、安装宝塔面板"></a>1、安装宝塔面板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Centos系统</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install.sh &amp;&amp; sh install.sh</span><br><span class="line"></span><br><span class="line">#Ubuntu系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu.sh &amp;&amp; sudo bash install.sh</span><br><span class="line"></span><br><span class="line">#Debian系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><h2 id="2、安装PHP环境"><a href="#2、安装PHP环境" class="headerlink" title="2、安装PHP环境"></a>2、安装PHP环境</h2><p>选择php7.3 <del>默认是php5.6好像</del><br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/3ab8532be6107.png" alt></p><h2 id="3、安装PHP扩展"><a href="#3、安装PHP扩展" class="headerlink" title="3、安装PHP扩展"></a>3、安装PHP扩展</h2><p>点击设置进去配置选项<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/344d6573fc715.png" alt></p><p>这里安装<code>fileinfo</code>扩展 并附带安装<code>opcache</code>扩展以加速php运行<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/effae127a0957.png" alt></p><h2 id="4、修改PHP禁用函数"><a href="#4、修改PHP禁用函数" class="headerlink" title="4、修改PHP禁用函数"></a>4、修改PHP禁用函数</h2><p>删除<code>exec</code>、<code>shell_exec</code> 、<code>proc_open</code>、<code>proc_get_status</code>和<code>putenv</code>函数，最后重启<code>PHP</code><br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/be9a21c07920d.png" alt></p><h2 id="5、安装Composer"><a href="#5、安装Composer" class="headerlink" title="5、安装Composer"></a>5、安装Composer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https:&#x2F;&#x2F;getcomposer.org&#x2F;installer | php</span><br><span class="line">mv composer.phar &#x2F;usr&#x2F;local&#x2F;bin&#x2F;composer</span><br></pre></td></tr></table></figure><h2 id="6、安装OLAINDEX"><a href="#6、安装OLAINDEX" class="headerlink" title="6、安装OLAINDEX"></a>6、安装OLAINDEX</h2><p>单击左侧网站，添加站点，此时网站根目录就是<code>/www/wwwroot/xx.com</code><br>运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#将域名修改成自己的再运行</span><br><span class="line">cd &#x2F;www&#x2F;wwwroot&#x2F;xx.com</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;WangNingkai&#x2F;OLAINDEX.git tmp </span><br><span class="line">mv tmp&#x2F;.git . </span><br><span class="line">rm -rf tmp </span><br><span class="line">git reset --hard </span><br><span class="line">cp database&#x2F;database.sample.sqlite database&#x2F;database.sqlite  # 数据库文件</span><br><span class="line">composer install -vvv # 这里确保已成功安装 composer ，如果报权限问题，建议给予用户完整权限。</span><br><span class="line">chmod -R 777 storage </span><br><span class="line">chown -R www:www * # 此处 www 根据服务器具体用户组而定</span><br><span class="line">php artisan od:install # 此处绑定域名需根据实际域名谨慎填写（包含http&#x2F;https）</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/c960a06e1831d.png" alt></p><h2 id="7、配置站点"><a href="#7、配置站点" class="headerlink" title="7、配置站点"></a>7、配置站点</h2><p>点击域名设置-网站目录，运行目录选择<code>public</code>，并把防跨站的勾去掉并重启<code>PHP</code>。然后点击伪静态，输入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/edbb8ed9d498b.png" alt></p><p>注释选定内容，防止图片出现404。<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/a9c6437caca53.png" alt></p><p>配置SSL，直接申请或者用已有的都行，开启强制HTTPS。<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/7b5726137164d.png" alt></p><h1 id="配置程序"><a href="#配置程序" class="headerlink" title="配置程序"></a>配置程序</h1><p>访问域名配置程序，如出现500错误，一般是因为权限不足，将上面的代码再执行一遍。<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/cce219aa988d5.png" alt></p><p>注意回调地址<code>redirect_uri</code>需要是<code>https</code>地址，所以之前需要开启SSL。确认好回调地址，点击申请，登陆帐号。</p><p>复制你的应用机密<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/a5b86af7f0b0b.png" alt></p><p>点击返回快速启动以后，复制你的应用id<br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/ce442031f30e4.png" alt></p><p>之后回到之前的界面填写完成，点击保存。至此就全部完成了，可以尽情享用了。</p><p>后台地址：<code>https://xx.com/admin</code>，密码：<code>12345678</code></p><div class="note warning">            <p>这里需要注意的是，如果你的账号是世纪互联，是无法直接申请的，需要你去<a href="https://www.azure.cn/" target="_blank" rel="noopener">Azure官网</a>注册一个应用，回调地址什么的是和国际版的方法一样的，之后添加一个客户端密码，然后回到之前的界面填入应用id和应用机密就好了。</p>          </div><p><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/d72dd3c3f0143.png" alt><br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/35bd43d647f8d.png" alt><br><img src="https://kyun.ltyuanfang.cn/tc/2020/05/24/bcadfad472748.png" alt></p><h1 id="特殊文件功能"><a href="#特殊文件功能" class="headerlink" title="特殊文件功能"></a>特殊文件功能</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#不建议创建和以下同名的文件夹和文件，否则会导致文件无法查看下载</span><br><span class="line">README.md、HEAD.md 、.password 、.deny特殊文件使用</span><br><span class="line"></span><br><span class="line">#在文件夹底部添加说明</span><br><span class="line">在onedrive的文件夹中添加README.md文件，使用markdown语法。</span><br><span class="line"></span><br><span class="line">#在文件夹头部添加说明</span><br><span class="line">在onedrive的文件夹中添加HEAD.md 文件，使用markdown语法。</span><br><span class="line"></span><br><span class="line">#加密文件夹</span><br><span class="line">在onedrive的文件夹中添加.password文件，填入密码，密码不能为空。</span><br><span class="line"></span><br><span class="line">#禁止访问文件夹</span><br><span class="line">在onedrive的文件夹中添加.deny文件，该文件夹被禁止访问。</span><br></pre></td></tr></table></figure><h1 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#重置全部数据，删除数据库数据</span><br><span class="line">php artisan od:reset</span><br><span class="line">    </span><br><span class="line">#升级程序</span><br><span class="line">git pull</span><br><span class="line">composer install -vvv</span><br><span class="line">php artisan od:update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 目录程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
            <tag> OLAINDEX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无岸海查题小程序</title>
      <link href="/xcx.html"/>
      <url>/xcx.html</url>
      
        <content type="html"><![CDATA[<center>来了来了~~ <font color="green">查题小程序</font>全新版本震撼上线！</center><center><font color="blue"> QQ小程序</font>搜索：<font color="blue">无岸海查题 </font></center><center>或者扫文章底部小程序码使用</center><center>之前由于某些原因，微信小程序停用了</center><center>但在后台看到每天还是有一些人访问，所以这次上线了QQ小程序</center><center><font color="red">千万题库！免费使用！</font></center><center>希望各位同学查不到也不要取消关注，因为题库在<font color="red">不断更新</font>！！！</center><center>每天都会新增题库，为的就是能够更好地为各位同学服务</center><center>这么好的小程序希望各位能够向同学朋友多多推广</center><center>公众号的软件资源也会不断更新</center><center>祝各位同学用的愉快，有问题可以及时联系我</center><center>最后的最后不要取消关注 关注我你一定会有收获的！</center><p><img src="https://gitee.com/noshore/images/raw/master/20200513220356.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 查题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网课查题 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 下载加速</title>
      <link href="/github.html"/>
      <url>/github.html</url>
      
        <content type="html"><![CDATA[<p><strong>Github 国内加速下载</strong><br><strong>Github</strong> 我们都知道是世界上最大的开源及私有软件项目的托管平台，全世界每天有海量优秀的开源软件在这里产生，而 Github 在国内很多时候获取到的下载链接是亚马逊的服务器。</p><p>中国因为不可言说的原因，经常<strong>抽疯</strong>或<strong>龟速</strong>。想要加快 Github 下载速度就需要用到 Github 国内加速服务。</p><p><strong>Github 加速下载</strong></p><p>只需要复制当前 Github 地址粘贴到输入框中就可以加速下载！</p><p><a href="https://www.toolnb.com/tools/githubjiasu.html" target="_blank" rel="noopener">https://www.toolnb.com/tools/githubjiasu.html</a></p><p><strong>Github 代下载服务</strong></p><p>在输入框中粘贴项目地址。支持最大不超过 2GB 的仓库。</p><p><a href="https://g.widora.cn" target="_blank" rel="noopener">https://g.widora.cn</a></p><p>该网站为演示站点，如无法打开可以查看开源项目：<a href="https://github.com/xiaoxinda/github-proxy" target="_blank" rel="noopener">github-proxy</a></p><p><strong>Github 文件加速</strong></p><p>利用 <strong>Cloudflare Workers</strong> 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带 cdn</p><p><a href="https://gh.api.99988866.xyz" target="_blank" rel="noopener">https://gh.api.99988866.xyz</a></p><p>该网站为演示站点，如无法打开可以查看开源项目：<a href="https://hunsh.net/archives/23/" target="_blank" rel="noopener">gh-proxy-Github 文件加速</a>自行部署。</p><p><strong>Github 加速脚本</strong></p><p>油猴插件：<a href="https://greasyfork.org/zh-CN/scripts/398278-github-%E9%95%9C%E5%83%8F%E8%AE%BF%E9%97%AE-%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">加速下载脚本</a></p><p>在此之前需要安装油猴或暴力猴扩展，如已安装请忽视<br> <a href="https://545c.com/file/13811899-415772159" target="_blank" rel="noopener">crx 下载</a><br>如无法直接安装.crx 扩展，使用终极解决方法，把.crx 解压缩，然后在扩展中心中开启<strong>开发者模式</strong>然后选择<strong>加载已解压的扩展程序</strong>。</p><p><strong>Github 国内中转</strong></p><p>直接提供了多个海外服务器来反向代理 Github 下载地址实现加速下载。</p><p><a href="http://git.aakkc.com" target="_blank" rel="noopener">http://git.aakkc.com</a></p><p>Github + Jsdelivr 也是不错的加速 Github 的方法，jsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。</p><p>也就是说如果 exe 文件是附加在<strong>Release</strong> 处但是没有在 code 里面的话是无法获取的。所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网课查题公众号</title>
      <link href="/wah.html"/>
      <url>/wah.html</url>
      
        <content type="html"><![CDATA[<p>关注公众号：<strong>无岸海</strong></p><p>支持截图搜索</p><p>免费无限次网课查题</p><p>另外送一些office365账号</p>]]></content>
      
      
      <categories>
          
          <category> 查题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公众号 </tag>
            
            <tag> 网课查题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo双线部署coding+github pages，进行速度优化并实现HTTPS</title>
      <link href="/shuangxianbushu.html"/>
      <url>/shuangxianbushu.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、域名申请"><a href="#一、域名申请" class="headerlink" title="一、域名申请"></a>一、域名申请</h1><p>首先，也是最主要的，你需要购买一个域名，常见的有阿里云、腾讯云、新网等</p><h1 id="二、coding注册及配置"><a href="#二、coding注册及配置" class="headerlink" title="二、coding注册及配置"></a>二、coding注册及配置</h1><h2 id="1-注册账户"><a href="#1-注册账户" class="headerlink" title="1.注册账户"></a>1.注册账户</h2><p>进入<a href="https://coding.net/" target="_blank" rel="noopener">coding官网</a>，点击免费注册（创建团队，5人以下免费） 注意这个地方用户名一定要好好设置，因为后面为了方便需要用到。</p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h2><p>选择代码托管项目，项目名称建议和你的用户名一致，到时候可以直接通过  <font color="red">user_name.coding.me</font>访问你的博客，如果项目名与用户名不一致，则需要通过  <font color="red"> user_name.coding.me/project_name </font>才能访问，项目描述随便写，勾选启用 README.md 文件初始化项目。<br><img src="https://gitee.com/noshore/images/raw/master/20200404160752.png" alt></p><h2 id="3-添加ssh-key"><a href="#3-添加ssh-key" class="headerlink" title="3.添加ssh key"></a>3.添加ssh key</h2><p>这一步和github是一样的<br>在git bash中<br><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code><br>可以用以下两条，检查一下你有没有输对<br><code>git config user.name</code><br><code>git config user.email</code><br>然后创建SSH,一路回车<br><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br>之前配置过github直接用就行，个人设置-ssh公钥，然后新增公钥，名称随便填，点击<strong>永久有效</strong>。<br><img src="https://gitee.com/noshore/images/raw/master/20200404162431.png" alt><br>添加后，检查一下是不是添加成功<br><code>ssh -T git@git.coding.net</code></p><h1 id="三、配置-config-yml"><a href="#三、配置-config-yml" class="headerlink" title="三、配置_config.yml"></a>三、配置_config.yml</h1><p>通过修改站点配置文件，实现github和coding的同时部署。<br>选择 SSH 方式（HTTPS 方式也可以，但是这种方式有时候可能连接不上，SSH 连接不容易出问题）复制链接，修改deploy如下，其中coding部分需要修改为你自己的用户名，也可以在项目概览右下角选择SSH，复制后面的内容。<br><img src="https://gitee.com/noshore/images/raw/master/20200404163003.png" alt><br><img src="https://gitee.com/noshore/images/raw/master/20200404193335.png" alt><br>然后执行命令<code>hexo g -d</code> 将博客双线部署</p><h1 id="四、开启Coding-Pages"><a href="#四、开启Coding-Pages" class="headerlink" title="四、开启Coding Pages"></a>四、开启Coding Pages</h1><p>进入你的项目，在构建与部署一栏选择静态网站，这里需要实名认证。<br>这里需要注意，新版的coding没有构建与部署，需要手动勾选。<br>左下角点击项目设置-功能开关-勾选构建与部属。<br><img src="https://gitee.com/noshore/images/raw/master/20200404163354.png" alt><br>选择静态网站，填写信息，跟着我的图勾选。<br><img src="https://gitee.com/noshore/images/raw/master/20200404163615.png" alt></p><h1 id="五、绑定域名并开启-HTTPS"><a href="#五、绑定域名并开启-HTTPS" class="headerlink" title="五、绑定域名并开启 HTTPS"></a>五、绑定域名并开启 HTTPS</h1><h2 id="1-绑定域名"><a href="#1-绑定域名" class="headerlink" title="1.绑定域名"></a>1.绑定域名</h2><p>在静态网站一栏右上角点击设置，下滑到底绑定我们的域名。<br>这里注意 绑定域名前先去把github的解析暂停，否则会出现SSL证书申请失败的问题。暂停之后暂时先不要开启<br><img src="https://gitee.com/noshore/images/raw/master/20200404164014.png" alt></p><h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2.域名解析"></a>2.域名解析</h2><p>1.在域名 <font color="red"> DNS </font>设置中添加一条  <font color="red">CNAME  </font>记录指向 <font color="red"> 你的coding pages地址 </font>，解析路线选择默认。<br>2.在域名 <font color="red">DNS</font>设置中添加一条<font color="red"> A</font>记录，记录指向 <font color="red"> 你的coding pages地址 </font>的<font color="red"> ip </font>，解析路线选择默认。（<font color="red"> ip地址获取：WIN+R输入cmd进入终端，输入：ping  你的coding pages地址 即可 </font>。） 其中coding pages地址就是你的访问地址<br><img src="https://gitee.com/noshore/images/raw/master/20200404193331.png" alt><br><img src="https://gitee.com/noshore/images/raw/master/20200404193600.png" alt><br>将 GitHub 的解析路线改为 境外，这样境外访问就会走 GitHub，境内就会走 Coding，也有人说阿里云是智能解析，自动分配路线，如果解析路线都是默认，境外访问同样会智能选择走 GitHub，境内走 Coding。</p><h2 id="3-开启HTTPS"><a href="#3-开启HTTPS" class="headerlink" title="3.开启HTTPS"></a>3.开启HTTPS</h2><p>最后，我们在coding中开启强制HTTPS，需要注意的是开启了不要急着去开启github的解析，等它生效，等个十来分钟然后去开启解析，最后去github绑定域名界面点击开启强制HTTPS。<br><img src="https://gitee.com/noshore/images/raw/master/20200404195903.png" alt><br><img src="https://gitee.com/noshore/images/raw/master/20200404194109.png" alt></p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>实现双线部署以后可以看一下速度确实快了一些，但也没有快的特别多，有时候coding还是会抽风，有条件的可以给域名备案然后开个CDN给网站加速。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> hexo </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献助手</title>
      <link href="/wenxianzhushou.html"/>
      <url>/wenxianzhushou.html</url>
      
        <content type="html"><![CDATA[<p>&ensp; <strong>文献神器简介</strong></p><ul><li>文献神器是SCI-HUB Windows桌面版，输入doi号即可快速下载（国外）文献。</li><li>本软件还推荐了谷歌学术，sci-hub入口，方便查询下载文献</li><li>文献神器：让文献下载变得更简单~</li><li>备注:不是所有功能都是免费的，大家勿喷，按需索取，百度文库可以每天免费下载两篇，超过需要pay money,不过很便宜了。</li></ul><p><img src="https://gitee.com/noshore/images/raw/master/20200403143924.png" alt><br>下载地址：<a href="https://www.lanzous.com/iayb1ij" target="_blank" rel="noopener">https://www.lanzous.com/iayb1ij</a> 密码:shore<br>另外附上一个医学翻译的网站，有需要可以自己试试<br><a href="https://fanyi.atman360.com/text" target="_blank" rel="noopener">Atman Cloud翻译</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用RaiDrive将网盘映射为本地磁盘</title>
      <link href="/raidrive.html"/>
      <url>/raidrive.html</url>
      
        <content type="html"><![CDATA[<p>&ensp; &ensp; 你是不是也想拥有别人那样的<strong>TB</strong>甚至<strong>EB</strong>的本地磁盘呢？这边为你提供一个实现这个想法的教程——通过<strong>Raidrive</strong>将网盘映射为本地磁盘。<br><img src="https://gitee.com/noshore/images/raw/master/20200402202917.png" alt><br>&ensp; &ensp; <strong>RaiDrive</strong>是一款开源的网盘映射工具，支持Google Drive、Google Photos、Dropbox、OneDrive、FTP、SFTP、WebDAV，该工具目前只有Windows版本。<br><img src="https://gitee.com/noshore/images/raw/master/20200402202537.png" alt><br><img src="https://gitee.com/noshore/images/raw/master/20200402202905.png" alt></p><h1 id="一、注册网盘帐号"><a href="#一、注册网盘帐号" class="headerlink" title="一、注册网盘帐号"></a>一、注册网盘帐号</h1><p>&ensp; &ensp; 现在用的比较多的就是Google Drive和OneDrive，但是国内如果你不会科学上网的话，Google Drive是用不了的。推荐使用Onedrive速度虽然不快但还是可以的。帐号的话大学应该都有提供学校的教育邮箱，去微软官网申请账号可以获得1T的容量。<br>&ensp; &ensp; 如果不是学生，博主这边会提供一些5T帐号，新的空白账号，支持修改密码。关注公众号：<strong>无岸海</strong>，回复<strong>5T帐号</strong> 即可领取。<br>&ensp; &ensp; 另外博主也提供<strong>创建Google Drive团队盘</strong>的服务，同样关注公众号：<strong>无岸海</strong>，回复<strong>团队盘</strong>。</p><h1 id="二、下载与安装"><a href="#二、下载与安装" class="headerlink" title="二、下载与安装"></a>二、下载与安装</h1><p>&ensp; &ensp; 可以前往<a href="https://www.raidrive.com/download/" target="_blank" rel="noopener">RaiDrive官网</a>下载最新版本安装。如果觉得下载慢可以直接使用博主提供的<a href="https://www.lanzous.com/iaxj7gf" target="_blank" rel="noopener">蓝奏云链接</a>下载，目前是最新版本，以后出了新版本也一样可以先下载这个版本，之后在软件中点击升级。</p><h1 id="三、连接网盘与映射"><a href="#三、连接网盘与映射" class="headerlink" title="三、连接网盘与映射"></a>三、连接网盘与映射</h1><p>&ensp; &ensp; 由于Google服务在国内无法访问，需要代理，并不是所有人都适合，所以这篇文章以OneDrive为例。</p><h2 id="1-修改语言"><a href="#1-修改语言" class="headerlink" title="1.修改语言"></a>1.修改语言</h2><p>&ensp; &ensp; 下载安装完成之后，打开软件应该是英文的，点击右上角的设置，先将语言改为中文以便你的连接与映射。<br><img src="https://gitee.com/noshore/images/raw/master/20200402210818.png" alt></p><h2 id="2-添加网盘"><a href="#2-添加网盘" class="headerlink" title="2.添加网盘"></a>2.添加网盘</h2><p>&ensp; &ensp; 右上角点击添加，选择Microsoft-OneDrive。自定义磁盘名称，<strong>将勾选的只读去掉</strong>，否则映射之后将无法写入，点击<strong>确定</strong>。<br><img src="https://gitee.com/noshore/images/raw/master/20200402211410.png" alt></p><h2 id="3-登陆OneDrive帐号"><a href="#3-登陆OneDrive帐号" class="headerlink" title="3.登陆OneDrive帐号"></a>3.登陆OneDrive帐号</h2><p>&ensp; &ensp; 输入账号密码，登陆。<br><img src="https://gitee.com/noshore/images/raw/master/20200402212724.png" alt></p><h2 id="4-授权RaiDrive"><a href="#4-授权RaiDrive" class="headerlink" title="4.授权RaiDrive"></a>4.授权RaiDrive</h2><p>&ensp; &ensp; 登陆账号后跳转到一个链接，RaiDrive请求征得许可，点击<strong>接受</strong>。<br><img src="https://gitee.com/noshore/images/raw/master/20200402212544.png" alt></p><h2 id="5-连接成功"><a href="#5-连接成功" class="headerlink" title="5.连接成功"></a>5.连接成功</h2><p>&ensp; &ensp; 提示RaiDrive将OneDrive连接到驱动器就成功了。<br><img src="https://gitee.com/noshore/images/raw/master/20200402212553.png" alt></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>&ensp; &ensp; 这样就拥有了大容量的本地磁盘，速度方便的话OneDrive还可以但也不快，不过用来在朋友面前装一下也是可以的哈哈哈。<br>&ensp; &ensp; 最后OneDrive的网盘当你用了超过90%可以免费升级25T，简便的方法就是先传个几十M的文件进去，然后复制粘贴，网速快的话十几分钟就能完成。</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 磁盘映射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
            <tag> RaiDrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用码云Gitee+PicGo搭建个人图床</title>
      <link href="/picgo.html"/>
      <url>/picgo.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>&ensp; &ensp; 日常写博客总会需要用到一些图片，本地图片一个个导入很麻烦而且会影响到博客的加载速度。网上也有很多免费的图床，不过总感觉不安全，万一哪天他们不做了之前的图片就都失效了。所以思来想去还是自己搭建一个图床。自己搭建图床的话可以用腾讯云、阿里云OSS，可惜需要付费，对于我这种需求量不大又刚起步的博客来说更偏向于白嫖。<br>&ensp; &ensp; 所以，最终选择使用 gitee 和 PicGo 搭建个人图床，相对现状这个是更加简便又实在的，存储、速度也都可以满足要求。或者，用 Github 代替 gitee 也是一样的，但是毕竟由于一些原因，访问有时太慢了，甚至直接卡掉，严重影响体验。不过也可以使用jsDelivr的CDN加速，这个之后有空在另一篇博客讲解。</p><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><p>这里需要注意一下，安装<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a>是为了后面配置Picgo插件。</p><h2 id="2-安装Picgo"><a href="#2-安装Picgo" class="headerlink" title="2.安装Picgo"></a>2.安装Picgo</h2><p>进入<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">Picgo官网</a>下载，由于github的问题下载速度较慢，在这里放上博主已经下载好上传到百度网盘的。<br>链接:<a href="https://pan.baidu.com/s/115MA7FdskRM2Rapd4RsBmg" target="_blank" rel="noopener">https://pan.baidu.com/s/115MA7FdskRM2Rapd4RsBmg</a> 提取码:a336</p><h1 id="二、码云配置"><a href="#二、码云配置" class="headerlink" title="二、码云配置"></a>二、码云配置</h1><h2 id="1-注册帐号"><a href="#1-注册帐号" class="headerlink" title="1.注册帐号"></a>1.注册帐号</h2><p>首先我们需要拥有一个gitee的帐号。<a href="https://gitee.com/" target="_blank" rel="noopener">码云gitee</a><br><img src="https://gitee.com/noshore/images/raw/master/20200402174853.png" alt></p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><p>这个仓库需要<strong>公开</strong>，否则上传的图片无法访问。<br>注意这个地方的仓库名称和路径尽量选择好记一点的，可以和我一样，后面会需要用到。<br>是否开源选择<strong>公开</strong><br><img src="https://gitee.com/noshore/images/raw/master/20200402175152.png" alt><br>语言随便选择，也可以不选。记得勾选使用Readme文件初始化这个仓库。<br><img src="https://gitee.com/noshore/images/raw/master/20200402175609.png" alt></p><h2 id="3-找到个人设置"><a href="#3-找到个人设置" class="headerlink" title="3.找到个人设置"></a>3.找到个人设置</h2><p>在个人主页，然后点击<br><img src="https://gitee.com/noshore/images/raw/master/20200402175736.png" alt></p><h2 id="4-生成“私人令牌”"><a href="#4-生成“私人令牌”" class="headerlink" title="4.生成“私人令牌”"></a>4.生成“私人令牌”</h2><p>进入个人设置，选择私人令牌，生成新令牌，令牌复制好。<br><img src="https://gitee.com/noshore/images/raw/master/20200402185000.png" alt><br><img src="https://gitee.com/noshore/images/raw/master/20200402185220.png" alt></p><h1 id="三、Picgo配置"><a href="#三、Picgo配置" class="headerlink" title="三、Picgo配置"></a>三、Picgo配置</h1><h1 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1.下载插件"></a>1.下载插件</h1><p>1.打开Picgo，搜索gitee，选择安装第二个插件 <strong>gitee-uploader 1.1.2</strong> ，该插件用来设置 gitee 作为图床的。<br><img src="https://gitee.com/noshore/images/raw/master/20200402185520.png" alt><br>2.安装成功后，点击该插件右下角齿轮状图标，选择 <strong>uploader - gitee</strong>。<br><img src="https://gitee.com/noshore/images/raw/master/20200402185548.jpg" alt></p><h1 id="2-插件配置"><a href="#2-插件配置" class="headerlink" title="2.插件配置"></a>2.插件配置</h1><p>在该配置中只需要配置 <strong>repo</strong> 和 <strong>token</strong> 两项。<br>其中 <strong>repo</strong> 为 ： giteeUsername/repositoryName，比如你的 gitee 账号为 user，存储图片的仓库为 images，则此处填入 <strong>user/images</strong><br><strong>token</strong> 则是 gitee 上之前生成的私人令牌，直接填入。<br>然后点击 <strong>确定</strong><br><img src="https://gitee.com/noshore/images/raw/master/20200402190036.jpg" alt></p><h1 id="3-设置使用"><a href="#3-设置使用" class="headerlink" title="3.设置使用"></a>3.设置使用</h1><p>1.进入<strong>Picgo设置</strong>看看gitee是否勾选，另外在左侧的<strong>图床设置</strong>中可以将gitee设置为默认图床<br><img src="https://gitee.com/noshore/images/raw/master/20200402190204.png" alt><br>2.最后，回到<strong>上传区</strong>，看到最上面的图片上传处选择框为 gitee 即可，然后就可以正常上传图片到 gitee 并获得外链了。<br><img src="https://gitee.com/noshore/images/raw/master/20200402190630.png" alt></p><p>好了！至此我们的个人图床就搭建完成，可以尽情的使用了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
          <category> 个人图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 个人图床 </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
